// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 50;
	objects = {

/* Begin PBXBuildFile section */
		A169987222FEBF6200F640E5 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A169987122FEBF6200F640E5 /* main.cpp */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		A169986C22FEBF6200F640E5 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		A10FC9C626D0E9FA0026A39E /* 86. Partition List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "86. Partition List.h"; sourceTree = "<group>"; };
		A10FC9C826D0EEDC0026A39E /* 16. 3Sum Closest.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "16. 3Sum Closest.h"; sourceTree = "<group>"; };
		A1141FCD2370863A003E7E4B /* 841. Keys and Rooms .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "841. Keys and Rooms .h"; sourceTree = "<group>"; };
		A1141FCF23709262003E7E4B /* 973. K Closest Points to Origin.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "973. K Closest Points to Origin.h"; sourceTree = "<group>"; };
		A1141FD12371D8AB003E7E4B /* 998. Maximum Binary Tree II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "998. Maximum Binary Tree II.h"; sourceTree = "<group>"; };
		A1141FD32371DE49003E7E4B /* 1227. Airplane Seat Assignment Probability.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1227. Airplane Seat Assignment Probability.h"; sourceTree = "<group>"; };
		A1141FD5237333FD003E7E4B /* 429. N-ary Tree Level Order Traversal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "429. N-ary Tree Level Order Traversal.h"; sourceTree = "<group>"; };
		A1141FD723748210003E7E4B /* 739. Daily Temperatures .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "739. Daily Temperatures .h"; sourceTree = "<group>"; };
		A1141FD92375C434003E7E4B /* 1140. Stone Game II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1140. Stone Game II.h"; sourceTree = "<group>"; };
		A1141FDB2375C4AB003E7E4B /* 513. Find Bottom Left Tree Value.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "513. Find Bottom Left Tree Value.h"; sourceTree = "<group>"; };
		A1141FDD23785425003E7E4B /* 931. Minimum Falling Path Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "931. Minimum Falling Path Sum.h"; sourceTree = "<group>"; };
		A1141FDF2378604A003E7E4B /* 695. Max Area of Island.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "695. Max Area of Island.h"; sourceTree = "<group>"; };
		A1141FE12379BCF0003E7E4B /* 1072. Flip Columns For Maximum Number of Equal Rows.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1072. Flip Columns For Maximum Number of Equal Rows.h"; sourceTree = "<group>"; };
		A1141FE32379CB7F003E7E4B /* 1254. Number of Closed Islands.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1254. Number of Closed Islands.h"; sourceTree = "<group>"; };
		A1141FE5237B1235003E7E4B /* 1219. Path with Maximum Gold.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1219. Path with Maximum Gold.h"; sourceTree = "<group>"; };
		A1141FE7237C66BA003E7E4B /* 427. Construct Quad Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "427. Construct Quad Tree.h"; sourceTree = "<group>"; };
		A1141FE9237DB722003E7E4B /* 1016. Binary String With Substrings Representing 1 To N.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1016. Binary String With Substrings Representing 1 To N.h"; sourceTree = "<group>"; };
		A1141FEB237DBA93003E7E4B /* 1249. Minimum Remove to Make Valid Parentheses.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1249. Minimum Remove to Make Valid Parentheses.h"; sourceTree = "<group>"; };
		A1141FED237F05E3003E7E4B /* 647. Palindromic Substrings .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "647. Palindromic Substrings .h"; sourceTree = "<group>"; };
		A1141FEF237F0F2B003E7E4B /* 946. Validate Stack Sequences.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "946. Validate Stack Sequences.h"; sourceTree = "<group>"; };
		A1141FF223805BED003E7E4B /* 515. Find Largest Value in Each Tree Row.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "515. Find Largest Value in Each Tree Row.h"; sourceTree = "<group>"; };
		A1141FF423813009003E7E4B /* 865. Smallest Subtree with all the Deepest Nodes.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "865. Smallest Subtree with all the Deepest Nodes.h"; sourceTree = "<group>"; };
		A1141FF6238301CF003E7E4B /* 1238. Circular Permutation in Binary Representation.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1238. Circular Permutation in Binary Representation.h"; sourceTree = "<group>"; };
		A1141FF823844C80003E7E4B /* 856. Score of Parentheses.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "856. Score of Parentheses.h"; sourceTree = "<group>"; };
		A1141FFA2386F76A003E7E4B /* 1004. Max Consecutive Ones III.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1004. Max Consecutive Ones III.h"; sourceTree = "<group>"; };
		A1141FFC238A6C30003E7E4B /* 983. Minimum Cost For Tickets.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "983. Minimum Cost For Tickets.h"; sourceTree = "<group>"; };
		A1141FFD238A6FD1003E7E4B /* 1190. Reverse Substrings Between Each Pair of Parentheses.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1190. Reverse Substrings Between Each Pair of Parentheses.h"; sourceTree = "<group>"; };
		A1141FFF238C32F7003E7E4B /* 1267. Count Servers that Communicate.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1267. Count Servers that Communicate.h"; sourceTree = "<group>"; };
		A1142001238C373B003E7E4B /* 1090. Largest Values From Labels.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1090. Largest Values From Labels.h"; sourceTree = "<group>"; };
		A1142003238D8A50003E7E4B /* 1115. Print FooBar Alternately.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1115. Print FooBar Alternately.h"; sourceTree = "<group>"; };
		A1142005238ECD01003E7E4B /* 347. Top K Frequent Elements.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "347. Top K Frequent Elements.h"; sourceTree = "<group>"; };
		A1142007239029D9003E7E4B /* 540. Single Element in a Sorted Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "540. Single Element in a Sorted Array.h"; sourceTree = "<group>"; };
		A11420092392CDC1003E7E4B /* 1143. Longest Common Subsequence.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1143. Longest Common Subsequence.h"; sourceTree = "<group>"; };
		A114200F23940AFC003E7E4B /* 1247. Minimum Swaps to Make Strings Equal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1247. Minimum Swaps to Make Strings Equal.h"; sourceTree = "<group>"; };
		A114201023941387003E7E4B /* 1273. Delete Tree Nodes.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1273. Delete Tree Nodes.h"; sourceTree = "<group>"; };
		A114201423941C9C003E7E4B /* 609. Find Duplicate File in System.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "609. Find Duplicate File in System.h"; sourceTree = "<group>"; };
		A114201623956EDA003E7E4B /* 1017. Convert to Base -2 .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1017. Convert to Base -2 .h"; sourceTree = "<group>"; };
		A114201823957F06003E7E4B /* 1105. Filling Bookcase Shelves.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1105. Filling Bookcase Shelves.h"; sourceTree = "<group>"; };
		A114201A2396C6DD003E7E4B /* 1094. Car Pooling.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1094. Car Pooling.h"; sourceTree = "<group>"; };
		A114201C23980933003E7E4B /* 1019. Next Greater Node In Linked List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1019. Next Greater Node In Linked List.h"; sourceTree = "<group>"; };
		A114201E23981795003E7E4B /* 78. Subsets.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "78. Subsets.h"; sourceTree = "<group>"; };
		A114202023981D0F003E7E4B /* 236. Lowest Common Ancestor of a Binary Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "236. Lowest Common Ancestor of a Binary Tree.h"; sourceTree = "<group>"; };
		A114202223996CB0003E7E4B /* 1209. Remove All Adjacent Duplicates in String II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1209. Remove All Adjacent Duplicates in String II.h"; sourceTree = "<group>"; };
		A114202423997526003E7E4B /* 712. Minimum ASCII Delete Sum for Two Strings.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "712. Minimum ASCII Delete Sum for Two Strings.h"; sourceTree = "<group>"; };
		A1142026239DDEAC003E7E4B /* 789. Escape The Ghosts.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "789. Escape The Ghosts.h"; sourceTree = "<group>"; };
		A1142028239DE6B5003E7E4B /* 526. Beautiful Arrangement.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "526. Beautiful Arrangement.h"; sourceTree = "<group>"; };
		A114202A239DED85003E7E4B /* 547. Friend Circles.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "547. Friend Circles.h"; sourceTree = "<group>"; };
		A117650726D2A728008AC339 /* 56. Merge Intervals.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "56. Merge Intervals.h"; sourceTree = "<group>"; };
		A117650926D2B153008AC339 /* 57. Insert Interval.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "57. Insert Interval.h"; sourceTree = "<group>"; };
		A11B547D235A240600A04D02 /* 1161. Maximum Level Sum of a Binary Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1161. Maximum Level Sum of a Binary Tree.h"; sourceTree = "<group>"; };
		A11B547F235A2B0800A04D02 /* 1104. Path In Zigzag Labelled Binary Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1104. Path In Zigzag Labelled Binary Tree.h"; sourceTree = "<group>"; };
		A128B8B4235E0A54008674AD /* 1222. Queens That Can Attack the King.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1222. Queens That Can Attack the King.h"; sourceTree = "<group>"; };
		A128B8B6235E1F5F008674AD /* 979. Distribute Coins in Binary Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "979. Distribute Coins in Binary Tree.h"; sourceTree = "<group>"; };
		A12C28932301BC2600A4554E /* 877. Stone Game.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "877. Stone Game.h"; sourceTree = "<group>"; };
		A12C289523095F3D00A4554E /* 2. Add Two Numbers.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "2. Add Two Numbers.h"; sourceTree = "<group>"; };
		A12C8ADA23411E6B000036C8 /* 1108. Defanging an IP Address.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1108. Defanging an IP Address.h"; sourceTree = "<group>"; };
		A12C8ADC23412343000036C8 /* 938. Range Sum of BST.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "938. Range Sum of BST.h"; sourceTree = "<group>"; };
		A12C8ADD234124DC000036C8 /* DataStructures.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = DataStructures.h; sourceTree = "<group>"; };
		A12C8AE223426EC5000036C8 /* 771. Jewels and Stones.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "771. Jewels and Stones.h"; sourceTree = "<group>"; };
		A12C8AE4234271E5000036C8 /* 709. To Lower Case.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "709. To Lower Case.h"; sourceTree = "<group>"; };
		A12C8AE623427645000036C8 /* 665. Non-decreasing Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "665. Non-decreasing Array.h"; sourceTree = "<group>"; };
		A12C8AE82344F6E7000036C8 /* 707. Design Linked List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "707. Design Linked List.h"; sourceTree = "<group>"; };
		A12C8AEA234503CA000036C8 /* 859. Buddy Strings.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "859. Buddy Strings.h"; sourceTree = "<group>"; };
		A12C8AEC23450D98000036C8 /* 532. K-diff Pairs in an Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "532. K-diff Pairs in an Array.h"; sourceTree = "<group>"; };
		A12C8AEE234A55CC000036C8 /* 605. Can Place Flowers.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "605. Can Place Flowers.h"; sourceTree = "<group>"; };
		A12C8AF0234B927F000036C8 /* 581. Shortest Unsorted Continuous Subarray.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "581. Shortest Unsorted Continuous Subarray.h"; sourceTree = "<group>"; };
		A12C8AF4234BA0FF000036C8 /* 686. Repeated String Match.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "686. Repeated String Match.h"; sourceTree = "<group>"; };
		A12EFCAD26C9809200E04EE1 /* 97. Interleaving String.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "97. Interleaving String.h"; sourceTree = "<group>"; };
		A12EFCAF26CAD41C00E04EE1 /* 92. Reverse Linked List II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "92. Reverse Linked List II.h"; sourceTree = "<group>"; };
		A12EFCB126CC262200E04EE1 /* 93. Restore IP Addresses.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "93. Restore IP Addresses.h"; sourceTree = "<group>"; };
		A13B50AB23B514FA00989E54 /* 1023. Camelcase Matching.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1023. Camelcase Matching.h"; sourceTree = "<group>"; };
		A13B50AD23B51A2B00989E54 /* 1020. Number of Enclaves.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1020. Number of Enclaves.h"; sourceTree = "<group>"; };
		A13B50AF23B66B7700989E54 /* 835. Image Overlap .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "835. Image Overlap .h"; sourceTree = "<group>"; };
		A13B50B123B674E500989E54 /* 947. Most Stones Removed with Same Row or Column.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "947. Most Stones Removed with Same Row or Column.h"; sourceTree = "<group>"; };
		A13FC03E23B283C8003DAA17 /* 919. Complete Binary Tree Inserter.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "919. Complete Binary Tree Inserter.h"; sourceTree = "<group>"; };
		A13FC04023B3C571003DAA17 /* 932. Beautiful Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "932. Beautiful Array.h"; sourceTree = "<group>"; };
		A13FC04223B3CBA4003DAA17 /* 1031. Maximum Sum of Two Non-Overlapping Subarrays.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1031. Maximum Sum of Two Non-Overlapping Subarrays.h"; sourceTree = "<group>"; };
		A141C4DC26E6798A0038BFC4 /* 71. Simplify Path.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "71. Simplify Path.h"; sourceTree = "<group>"; };
		A141CB82235C47B1006E38C4 /* 921. Minimum Add to Make Parentheses Valid.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "921. Minimum Add to Make Parentheses Valid.h"; sourceTree = "<group>"; };
		A14F44F426CD74EA00953CC3 /* 91. Decode Ways .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "91. Decode Ways .h"; sourceTree = "<group>"; };
		A14F44F626CD7B2100953CC3 /* 639. Decode Ways II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "639. Decode Ways II.h"; sourceTree = "<group>"; };
		A15842392365F74C00AA3F4A /* 986. Interval List Intersections.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "986. Interval List Intersections.h"; sourceTree = "<group>"; };
		A1607855235F6AE900BF651E /* 885. Spiral Matrix III.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "885. Spiral Matrix III.h"; sourceTree = "<group>"; };
		A1607857235F6B6600BF651E /* 537. Complex Number Multiplication.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "537. Complex Number Multiplication.h"; sourceTree = "<group>"; };
		A164FE5123B1306C00155D85 /* 529. Minesweeper.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "529. Minesweeper.h"; sourceTree = "<group>"; };
		A169986E22FEBF6200F640E5 /* leetcode */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = leetcode; sourceTree = BUILT_PRODUCTS_DIR; };
		A169987122FEBF6200F640E5 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
		A169987A22FEC07C00F640E5 /* 1025. Divisor Game.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1025. Divisor Game.h"; sourceTree = "<group>"; };
		A169987B22FEC18700F640E5 /* README.md */ = {isa = PBXFileReference; lastKnownFileType = net.daringfireball.markdown; path = README.md; sourceTree = "<group>"; };
		A169987F22FECD1900F640E5 /* 746. Min Cost Climbing Stairs.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "746. Min Cost Climbing Stairs.h"; sourceTree = "<group>"; };
		A16B580C23BFAA5B00BC7028 /* 1003. Check If Word Is Valid After Substitutions.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1003. Check If Word Is Valid After Substitutions.h"; sourceTree = "<group>"; };
		A16B580F23C2522F00BC7028 /* 85. Maximal Rectangle.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "85. Maximal Rectangle.h"; sourceTree = "<group>"; };
		A171BAA32363552900B5061F /* 746. Min Cost Climbing Stairs.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "746. Min Cost Climbing Stairs.h"; sourceTree = "<group>"; };
		A171BAA42363553400B5061F /* 1025. Divisor Game.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "1025. Divisor Game.h"; sourceTree = "<group>"; };
		A171BAA52363553B00B5061F /* README.md */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = net.daringfireball.markdown; path = README.md; sourceTree = "<group>"; };
		A171BAA72363565900B5061F /* 951. Flip Equivalent Binary Trees.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "951. Flip Equivalent Binary Trees.h"; sourceTree = "<group>"; };
		A171BAA923635AEE00B5061F /* 1123. Lowest Common Ancestor of Deepest Leaves.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1123. Lowest Common Ancestor of Deepest Leaves.h"; sourceTree = "<group>"; };
		A17F71A626EBC83400E51168 /* 63. Unique Paths II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "63. Unique Paths II.h"; sourceTree = "<group>"; };
		A1816F1A2483994000F4C1DF /* 443. String Compression.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "443. String Compression.h"; sourceTree = "<group>"; };
		A18F21AF26A49810009EB007 /* 1689. Partitioning Into Minimum Number Of Deci-Binary Numbers.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1689. Partitioning Into Minimum Number Of Deci-Binary Numbers.h"; sourceTree = "<group>"; };
		A18F21B126A49C8B009EB007 /* 1476. Subrectangle Queries.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1476. Subrectangle Queries.h"; sourceTree = "<group>"; };
		A18F21B326A5EA47009EB007 /* 1828. Queries on Number of Points Inside a Circle.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1828. Queries on Number of Points Inside a Circle.h"; sourceTree = "<group>"; };
		A18F21B526A5F117009EB007 /* 1769. Minimum Number of Operations to Move All Balls to Each Box.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1769. Minimum Number of Operations to Move All Balls to Each Box.h"; sourceTree = "<group>"; };
		A18F21B726A73CD5009EB007 /* 1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree.h"; sourceTree = "<group>"; };
		A18F21B926A73EB1009EB007 /* 1282. Group the People Given the Group Size They Belong To.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1282. Group the People Given the Group Size They Belong To.h"; sourceTree = "<group>"; };
		A18F21BB26A74219009EB007 /* 1637. Widest Vertical Area Between Two Points Containing No Points.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1637. Widest Vertical Area Between Two Points Containing No Points.h"; sourceTree = "<group>"; };
		A18F21BD26A8892F009EB007 /* 1409. Queries on a Permutation With Key.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1409. Queries on a Permutation With Key.h"; sourceTree = "<group>"; };
		A18F21BF26A88E5A009EB007 /* 1329. Sort the Matrix Diagonally.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1329. Sort the Matrix Diagonally.h"; sourceTree = "<group>"; };
		A18F21C126A9D35F009EB007 /* 1551. Minimum Operations to Make Array Equal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1551. Minimum Operations to Make Array Equal.h"; sourceTree = "<group>"; };
		A18F21C326A9D9BE009EB007 /* 1877. Minimize Maximum Pair Sum in Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1877. Minimize Maximum Pair Sum in Array.h"; sourceTree = "<group>"; };
		A18F21C526A9DBBB009EB007 /* 1817. Finding the Users Active Minutes.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1817. Finding the Users Active Minutes.h"; sourceTree = "<group>"; };
		A196AC4223B8FA7000A37EB8 /* 1233. Remove Sub-Folders from the Filesystem.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1233. Remove Sub-Folders from the Filesystem.h"; sourceTree = "<group>"; };
		A196AC4423B9077800A37EB8 /* 684. Redundant Connection.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "684. Redundant Connection.h"; sourceTree = "<group>"; };
		A196AC4623BA5C0E00A37EB8 /* 565. Array Nesting.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "565. Array Nesting.h"; sourceTree = "<group>"; };
		A196AC4823BA60C500A37EB8 /* 648. Replace Words.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "648. Replace Words.h"; sourceTree = "<group>"; };
		A196AC4A23BBADA400A37EB8 /* 1116. Print Zero Even Odd.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1116. Print Zero Even Odd.h"; sourceTree = "<group>"; };
		A196AC4C23BBB27C00A37EB8 /* 1268. Search Suggestions System.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1268. Search Suggestions System.h"; sourceTree = "<group>"; };
		A196AC4E23BE560B00A37EB8 /* 1052. Grumpy Bookstore Owner.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1052. Grumpy Bookstore Owner.h"; sourceTree = "<group>"; };
		A1A7971D23A93A8600A7B758 /* 508. Most Frequent Subtree Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "508. Most Frequent Subtree Sum.h"; sourceTree = "<group>"; };
		A1A7971F23AA8CE100A7B758 /* 817. Linked List Components.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "817. Linked List Components.h"; sourceTree = "<group>"; };
		A1A7972123AA939700A7B758 /* 1011. Capacity To Ship Packages Within D Days.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1011. Capacity To Ship Packages Within D Days.h"; sourceTree = "<group>"; };
		A1A81B132483B18000C83603 /* 1002. Find Common Characters.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1002. Find Common Characters.h"; sourceTree = "<group>"; };
		A1A81B152483DB3F00C83603 /* 1315. Sum of Nodes with Even-Valued Grandparent.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1315. Sum of Nodes with Even-Valued Grandparent.h"; sourceTree = "<group>"; };
		A1A81B172483E07700C83603 /* 1302. Deepest Leaves Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1302. Deepest Leaves Sum.h"; sourceTree = "<group>"; };
		A1A81B19248551D100C83603 /* 1290. Convert Binary Number in a Linked List to Integer.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1290. Convert Binary Number in a Linked List to Integer.h"; sourceTree = "<group>"; };
		A1A81B1B2485531500C83603 /* 876. Middle of the Linked List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "876. Middle of the Linked List.h"; sourceTree = "<group>"; };
		A1A81B1D24856BA700C83603 /* 1263. Minimum Moves to Move a Box to Their Target Location.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1263. Minimum Moves to Move a Box to Their Target Location.h"; sourceTree = "<group>"; };
		A1A81B1F248805EB00C83603 /* 1325. Delete Leaves With a Given Value.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1325. Delete Leaves With a Given Value.h"; sourceTree = "<group>"; };
		A1A81B2124880C2300C83603 /* 1415. The k-th Lexicographical String of All Happy Strings of Length n.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1415. The k-th Lexicographical String of All Happy Strings of Length n.h"; sourceTree = "<group>"; };
		A1A81B26248D15F800C83603 /* 445. Add Two Numbers II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "445. Add Two Numbers II.h"; sourceTree = "<group>"; };
		A1A8E28C26CEC344008233E8 /* 90. Subsets II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "90. Subsets II.h"; sourceTree = "<group>"; };
		A1B3C32023ABE7CE00C0B217 /* 553. Optimal Division.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "553. Optimal Division.h"; sourceTree = "<group>"; };
		A1B4B0A626E52E1800C6D7FB /* 77. Combinations.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "77. Combinations.h"; sourceTree = "<group>"; };
		A1B71FEB2365913700EB34CC /* 1110. Delete Nodes And Return Forest.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1110. Delete Nodes And Return Forest.h"; sourceTree = "<group>"; };
		A1C05EA4235C91630077F738 /* 861. Score After Flipping Matrix.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "861. Score After Flipping Matrix.h"; sourceTree = "<group>"; };
		A1C05EA6235CA1E10077F738 /* 1111. Maximum Nesting Depth of Two Valid Parentheses Strings.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1111. Maximum Nesting Depth of Two Valid Parentheses Strings.h"; sourceTree = "<group>"; };
		A1C38D3F248D22DE0090D3C3 /* 430. Flatten a Multilevel Doubly Linked List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "430. Flatten a Multilevel Doubly Linked List.h"; sourceTree = "<group>"; };
		A1C38D41248E97B90090D3C3 /* 725. Split Linked List in Parts.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "725. Split Linked List in Parts.h"; sourceTree = "<group>"; };
		A1C38D43248EAB430090D3C3 /* 109. Convert Sorted List to Binary Search Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "109. Convert Sorted List to Binary Search Tree.h"; sourceTree = "<group>"; };
		A1C38D4524913ED90090D3C3 /* 142. Linked List Cycle II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "142. Linked List Cycle II.h"; sourceTree = "<group>"; };
		A1CE719D26A9E51A00D78675 /* 3. Longest Substring Without Repeating Characters.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "3. Longest Substring Without Repeating Characters.h"; sourceTree = "<group>"; };
		A1CE719F26AC3BA900D78675 /* 5. Longest Palindromic Substring.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "5. Longest Palindromic Substring.h"; sourceTree = "<group>"; };
		A1CE71A126AC8E1B00D78675 /* 1605. Find Valid Matrix Given Row and Column Sums.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1605. Find Valid Matrix Given Row and Column Sums.h"; sourceTree = "<group>"; };
		A1CE71A326AD431100D78675 /* 1305. All Elements in Two Binary Search Trees.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1305. All Elements in Two Binary Search Trees.h"; sourceTree = "<group>"; };
		A1CE71A526AD483700D78675 /* 1630. Arithmetic Subarrays.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1630. Arithmetic Subarrays.h"; sourceTree = "<group>"; };
		A1CE71A726AF2C2600D78675 /* 146. LRU Cache.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "146. LRU Cache.h"; sourceTree = "<group>"; };
		A1CE71A926B1AE9D00D78675 /* 33. Search in Rotated Sorted Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "33. Search in Rotated Sorted Array.h"; sourceTree = "<group>"; };
		A1CE71AB26B1D7E200D78675 /* 25. Reverse Nodes in k-Group.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "25. Reverse Nodes in k-Group.h"; sourceTree = "<group>"; };
		A1CE71AD26B3177900D78675 /* 15. 3Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "15. 3Sum.h"; sourceTree = "<group>"; };
		A1CE71AF26B685D600D78675 /* 121. Best Time to Buy and Sell Stock.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "121. Best Time to Buy and Sell Stock.h"; sourceTree = "<group>"; };
		A1CE71B126B689BD00D78675 /* 42. Trapping Rain Water.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "42. Trapping Rain Water.h"; sourceTree = "<group>"; };
		A1CE71B326B6961A00D78675 /* 53. Maximum Subarray.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "53. Maximum Subarray.h"; sourceTree = "<group>"; };
		A1CE71B526B6980100D78675 /* 54. Spiral Matrix.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "54. Spiral Matrix.h"; sourceTree = "<group>"; };
		A1CE71B726B69F3A00D78675 /* 200. Number of Islands.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "200. Number of Islands.h"; sourceTree = "<group>"; };
		A1CE71B926B7093100D78675 /* 199. Binary Tree Right Side View.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "199. Binary Tree Right Side View.h"; sourceTree = "<group>"; };
		A1DD0DA224A9025F00588495 /* 96. Unique Binary Search Trees.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "96. Unique Binary Search Trees.h"; sourceTree = "<group>"; };
		A1DD0DA424AA460A00588495 /* 61. Rotate List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "61. Rotate List.h"; sourceTree = "<group>"; };
		A1DD0DA624ACF23C00588495 /* 103. Binary Tree Zigzag Level Order Traversal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "103. Binary Tree Zigzag Level Order Traversal.h"; sourceTree = "<group>"; };
		A1DD0DA824AE3E6E00588495 /* 105. Construct Binary Tree from Preorder and Inorder Traversal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "105. Construct Binary Tree from Preorder and Inorder Traversal.h"; sourceTree = "<group>"; };
		A1DD0DAA24AF8E3800588495 /* 98. Validate Binary Search Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "98. Validate Binary Search Tree.h"; sourceTree = "<group>"; };
		A1DD0DAC24AF94C900588495 /* 99. Recover Binary Search Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "99. Recover Binary Search Tree.h"; sourceTree = "<group>"; };
		A1DD7195234CEC5B003E8052 /* 69. Sqrt(x).h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "69. Sqrt(x).h"; sourceTree = "<group>"; };
		A1DD7197234CF61E003E8052 /* 633. Sum of Square Numbers.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "633. Sum of Square Numbers.h"; sourceTree = "<group>"; };
		A1DD7199234CFBF2003E8052 /* 874. Walking Robot Simulation.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "874. Walking Robot Simulation.h"; sourceTree = "<group>"; };
		A1DD71BB234F9780003E8052 /* 807. Max Increase to Keep City Skyline.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "807. Max Increase to Keep City Skyline.h"; sourceTree = "<group>"; };
		A1DD71BD2350E8CA003E8052 /* 1038. Binary Search Tree to Greater Sum Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1038. Binary Search Tree to Greater Sum Tree.h"; sourceTree = "<group>"; };
		A1DD71BF23523B75003E8052 /* 535. Encode and Decode TinyURL.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "535. Encode and Decode TinyURL.h"; sourceTree = "<group>"; };
		A1DD71C12352478F003E8052 /* 701. Insert into a Binary Search Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "701. Insert into a Binary Search Tree.h"; sourceTree = "<group>"; };
		A1DD71C223524823003E8052 /* 701. Insert into a Binary Search Tree.txt */ = {isa = PBXFileReference; lastKnownFileType = text; path = "701. Insert into a Binary Search Tree.txt"; sourceTree = "<group>"; };
		A1DD71C423524B6F003E8052 /* 654. Maximum Binary Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "654. Maximum Binary Tree.h"; sourceTree = "<group>"; };
		A1DD71C52352F745003E8052 /* 654. Maximum Binary Tree.txt */ = {isa = PBXFileReference; lastKnownFileType = text; path = "654. Maximum Binary Tree.txt"; sourceTree = "<group>"; };
		A1DD71C7235381D1003E8052 /* 1079. Letter Tile Possibilities.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1079. Letter Tile Possibilities.h"; sourceTree = "<group>"; };
		A1DD71C823538C5F003E8052 /* 1079. Letter Tile Possibilities.txt */ = {isa = PBXFileReference; lastKnownFileType = text; path = "1079. Letter Tile Possibilities.txt"; sourceTree = "<group>"; };
		A1DD71CA2354DA5E003E8052 /* 1008. Construct Binary Search Tree from Preorder Traversal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1008. Construct Binary Search Tree from Preorder Traversal.h"; sourceTree = "<group>"; };
		A1DD71CC23561DA4003E8052 /* 950. Reveal Cards In Increasing Order.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "950. Reveal Cards In Increasing Order.h"; sourceTree = "<group>"; };
		A1DD71CE23562D6E003E8052 /* 763. Partition Labels.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "763. Partition Labels.h"; sourceTree = "<group>"; };
		A1DD71D02357781B003E8052 /* 814. Binary Tree Pruning.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "814. Binary Tree Pruning.h"; sourceTree = "<group>"; };
		A1DD71D223577CC5003E8052 /* 797. All Paths From Source to Target.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "797. All Paths From Source to Target.h"; sourceTree = "<group>"; };
		A1DD71D42358C59C003E8052 /* 890. Find and Replace Pattern.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "890. Find and Replace Pattern.h"; sourceTree = "<group>"; };
		A1DD71D62358CD89003E8052 /* 894. All Possible Full Binary Trees.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "894. All Possible Full Binary Trees.h"; sourceTree = "<group>"; };
		A1DF72152497CB600078909E /* 617. Merge Two Binary Trees.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "617. Merge Two Binary Trees.h"; sourceTree = "<group>"; };
		A1EA24912369F182009BAE43 /* 959. Regions Cut By Slashes.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "959. Regions Cut By Slashes.h"; sourceTree = "<group>"; };
		A1EA2493236B43AE009BAE43 /* 791. Custom Sort String.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "791. Custom Sort String.h"; sourceTree = "<group>"; };
		A1EA2495236C9DC6009BAE43 /* 912. Sort an Array .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "912. Sort an Array .h"; sourceTree = "<group>"; };
		A1EA2497236C9DFA009BAE43 /* 1043. Partition Array for Maximum Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1043. Partition Array for Maximum Sum.h"; sourceTree = "<group>"; };
		A1EA2499236DEEF2009BAE43 /* 969. Pancake Sorting.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "969. Pancake Sorting.h"; sourceTree = "<group>"; };
		A1EA249B236DF909009BAE43 /* 889. Construct Binary Tree from Preorder and Postorder Traversal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "889. Construct Binary Tree from Preorder and Postorder Traversal.h"; sourceTree = "<group>"; };
		A1EA249D236EB26A009BAE43 /* 1130. Minimum Cost Tree From Leaf Values.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1130. Minimum Cost Tree From Leaf Values.h"; sourceTree = "<group>"; };
		A1EA249F236EB2A6009BAE43 /* 1026. Maximum Difference Between Node and Ancestor.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1026. Maximum Difference Between Node and Ancestor.h"; sourceTree = "<group>"; };
		A1FFD64626D8D3CC0006B1DF /* 59. Spiral Matrix II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "59. Spiral Matrix II.h"; sourceTree = "<group>"; };
		A1FFD64826D8D6970006B1DF /* 64. Minimum Path Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "64. Minimum Path Sum.h"; sourceTree = "<group>"; };
		A1FFD64A26D8D8E30006B1DF /* 73. Set Matrix Zeroes.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "73. Set Matrix Zeroes.h"; sourceTree = "<group>"; };
		A1FFD64C26D8E14D0006B1DF /* 75. Sort Colors.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "75. Sort Colors.h"; sourceTree = "<group>"; };
		A1FFD64E26DA19E80006B1DF /* 82. Remove Duplicates from Sorted List II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "82. Remove Duplicates from Sorted List II.h"; sourceTree = "<group>"; };
		A1FFD65026DA1D130006B1DF /* 80. Remove Duplicates from Sorted Array II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "80. Remove Duplicates from Sorted Array II.h"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		A169986B22FEBF6200F640E5 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		A10FC9C526D0E9F40026A39E /* 86. Partition List */ = {
			isa = PBXGroup;
			children = (
				A10FC9C626D0E9FA0026A39E /* 86. Partition List.h */,
			);
			path = "86. Partition List";
			sourceTree = "<group>";
		};
		A10FC9C726D0EED70026A39E /* 16. 3Sum Closest */ = {
			isa = PBXGroup;
			children = (
				A10FC9C826D0EEDC0026A39E /* 16. 3Sum Closest.h */,
			);
			path = "16. 3Sum Closest";
			sourceTree = "<group>";
		};
		A1141FCC2370862D003E7E4B /* 841. Keys and Rooms  */ = {
			isa = PBXGroup;
			children = (
				A1141FCD2370863A003E7E4B /* 841. Keys and Rooms .h */,
			);
			path = "841. Keys and Rooms ";
			sourceTree = "<group>";
		};
		A1141FCE23709243003E7E4B /* 973. K Closest Points to Origin */ = {
			isa = PBXGroup;
			children = (
				A1141FCF23709262003E7E4B /* 973. K Closest Points to Origin.h */,
			);
			path = "973. K Closest Points to Origin";
			sourceTree = "<group>";
		};
		A1141FD02371D8A4003E7E4B /* 998. Maximum Binary Tree II */ = {
			isa = PBXGroup;
			children = (
				A1141FD12371D8AB003E7E4B /* 998. Maximum Binary Tree II.h */,
			);
			path = "998. Maximum Binary Tree II";
			sourceTree = "<group>";
		};
		A1141FD22371DE43003E7E4B /* 1227. Airplane Seat Assignment Probability */ = {
			isa = PBXGroup;
			children = (
				A1141FD32371DE49003E7E4B /* 1227. Airplane Seat Assignment Probability.h */,
			);
			path = "1227. Airplane Seat Assignment Probability";
			sourceTree = "<group>";
		};
		A1141FD4237333F5003E7E4B /* 429. N-ary Tree Level Order Traversal */ = {
			isa = PBXGroup;
			children = (
				A1141FD5237333FD003E7E4B /* 429. N-ary Tree Level Order Traversal.h */,
			);
			path = "429. N-ary Tree Level Order Traversal";
			sourceTree = "<group>";
		};
		A1141FD62374820B003E7E4B /* 739. Daily Temperatures  */ = {
			isa = PBXGroup;
			children = (
				A1141FD723748210003E7E4B /* 739. Daily Temperatures .h */,
			);
			path = "739. Daily Temperatures ";
			sourceTree = "<group>";
		};
		A1141FD82375C3F7003E7E4B /* 1140. Stone Game II */ = {
			isa = PBXGroup;
			children = (
				A1141FD92375C434003E7E4B /* 1140. Stone Game II.h */,
			);
			path = "1140. Stone Game II";
			sourceTree = "<group>";
		};
		A1141FDA2375C49F003E7E4B /* 513. Find Bottom Left Tree Value */ = {
			isa = PBXGroup;
			children = (
				A1141FDB2375C4AB003E7E4B /* 513. Find Bottom Left Tree Value.h */,
			);
			path = "513. Find Bottom Left Tree Value";
			sourceTree = "<group>";
		};
		A1141FDC23785415003E7E4B /* 931. Minimum Falling Path Sum */ = {
			isa = PBXGroup;
			children = (
				A1141FDD23785425003E7E4B /* 931. Minimum Falling Path Sum.h */,
			);
			path = "931. Minimum Falling Path Sum";
			sourceTree = "<group>";
		};
		A1141FDE23786044003E7E4B /* 695. Max Area of Island */ = {
			isa = PBXGroup;
			children = (
				A1141FDF2378604A003E7E4B /* 695. Max Area of Island.h */,
			);
			path = "695. Max Area of Island";
			sourceTree = "<group>";
		};
		A1141FE02379BCEA003E7E4B /* 1072. Flip Columns For Maximum Number of Equal Rows */ = {
			isa = PBXGroup;
			children = (
				A1141FE12379BCF0003E7E4B /* 1072. Flip Columns For Maximum Number of Equal Rows.h */,
			);
			path = "1072. Flip Columns For Maximum Number of Equal Rows";
			sourceTree = "<group>";
		};
		A1141FE22379CB7A003E7E4B /* 1254. Number of Closed Islands */ = {
			isa = PBXGroup;
			children = (
				A1141FE32379CB7F003E7E4B /* 1254. Number of Closed Islands.h */,
			);
			path = "1254. Number of Closed Islands";
			sourceTree = "<group>";
		};
		A1141FE4237B122C003E7E4B /* 1219. Path with Maximum Gold */ = {
			isa = PBXGroup;
			children = (
				A1141FE5237B1235003E7E4B /* 1219. Path with Maximum Gold.h */,
			);
			path = "1219. Path with Maximum Gold";
			sourceTree = "<group>";
		};
		A1141FE6237C66B1003E7E4B /* 427. Construct Quad Tree */ = {
			isa = PBXGroup;
			children = (
				A1141FE7237C66BA003E7E4B /* 427. Construct Quad Tree.h */,
			);
			path = "427. Construct Quad Tree";
			sourceTree = "<group>";
		};
		A1141FE8237DB6EE003E7E4B /* 1016. Binary String With Substrings Representing 1 To N */ = {
			isa = PBXGroup;
			children = (
				A1141FE9237DB722003E7E4B /* 1016. Binary String With Substrings Representing 1 To N.h */,
			);
			path = "1016. Binary String With Substrings Representing 1 To N";
			sourceTree = "<group>";
		};
		A1141FEA237DBA8C003E7E4B /* 1249. Minimum Remove to Make Valid Parentheses */ = {
			isa = PBXGroup;
			children = (
				A1141FEB237DBA93003E7E4B /* 1249. Minimum Remove to Make Valid Parentheses.h */,
			);
			path = "1249. Minimum Remove to Make Valid Parentheses";
			sourceTree = "<group>";
		};
		A1141FEC237F05DC003E7E4B /* 647. Palindromic Substrings  */ = {
			isa = PBXGroup;
			children = (
				A1141FED237F05E3003E7E4B /* 647. Palindromic Substrings .h */,
			);
			path = "647. Palindromic Substrings ";
			sourceTree = "<group>";
		};
		A1141FEE237F0F25003E7E4B /* 946. Validate Stack Sequences */ = {
			isa = PBXGroup;
			children = (
				A1141FEF237F0F2B003E7E4B /* 946. Validate Stack Sequences.h */,
			);
			path = "946. Validate Stack Sequences";
			sourceTree = "<group>";
		};
		A1141FF123805BE6003E7E4B /* 515. Find Largest Value in Each Tree Row */ = {
			isa = PBXGroup;
			children = (
				A1141FF223805BED003E7E4B /* 515. Find Largest Value in Each Tree Row.h */,
			);
			path = "515. Find Largest Value in Each Tree Row";
			sourceTree = "<group>";
		};
		A1141FF323813004003E7E4B /* 865. Smallest Subtree with all the Deepest Nodes */ = {
			isa = PBXGroup;
			children = (
				A1141FF423813009003E7E4B /* 865. Smallest Subtree with all the Deepest Nodes.h */,
			);
			path = "865. Smallest Subtree with all the Deepest Nodes";
			sourceTree = "<group>";
		};
		A1141FF5238301C9003E7E4B /* 1238. Circular Permutation in Binary Representation */ = {
			isa = PBXGroup;
			children = (
				A1141FF6238301CF003E7E4B /* 1238. Circular Permutation in Binary Representation.h */,
			);
			path = "1238. Circular Permutation in Binary Representation";
			sourceTree = "<group>";
		};
		A1141FF723844C78003E7E4B /* 856. Score of Parentheses */ = {
			isa = PBXGroup;
			children = (
				A1141FF823844C80003E7E4B /* 856. Score of Parentheses.h */,
			);
			path = "856. Score of Parentheses";
			sourceTree = "<group>";
		};
		A1141FF92386F764003E7E4B /* 1004. Max Consecutive Ones III */ = {
			isa = PBXGroup;
			children = (
				A1141FFA2386F76A003E7E4B /* 1004. Max Consecutive Ones III.h */,
			);
			path = "1004. Max Consecutive Ones III";
			sourceTree = "<group>";
		};
		A1141FFB238A6C27003E7E4B /* 983. Minimum Cost For Tickets */ = {
			isa = PBXGroup;
			children = (
				A1141FFC238A6C30003E7E4B /* 983. Minimum Cost For Tickets.h */,
			);
			path = "983. Minimum Cost For Tickets";
			sourceTree = "<group>";
		};
		A1141FFE238C32DC003E7E4B /* 1267. Count Servers that Communicate */ = {
			isa = PBXGroup;
			children = (
				A1141FFF238C32F7003E7E4B /* 1267. Count Servers that Communicate.h */,
			);
			path = "1267. Count Servers that Communicate";
			sourceTree = "<group>";
		};
		A1142000238C3735003E7E4B /* 1090. Largest Values From Labels */ = {
			isa = PBXGroup;
			children = (
				A1142001238C373B003E7E4B /* 1090. Largest Values From Labels.h */,
			);
			path = "1090. Largest Values From Labels";
			sourceTree = "<group>";
		};
		A1142002238D8A49003E7E4B /* 1115. Print FooBar Alternately */ = {
			isa = PBXGroup;
			children = (
				A1142003238D8A50003E7E4B /* 1115. Print FooBar Alternately.h */,
			);
			path = "1115. Print FooBar Alternately";
			sourceTree = "<group>";
		};
		A1142004238ECCF6003E7E4B /* 347. Top K Frequent Elements */ = {
			isa = PBXGroup;
			children = (
				A1142005238ECD01003E7E4B /* 347. Top K Frequent Elements.h */,
			);
			path = "347. Top K Frequent Elements";
			sourceTree = "<group>";
		};
		A1142006239029D3003E7E4B /* 540. Single Element in a Sorted Array */ = {
			isa = PBXGroup;
			children = (
				A1142007239029D9003E7E4B /* 540. Single Element in a Sorted Array.h */,
			);
			path = "540. Single Element in a Sorted Array";
			sourceTree = "<group>";
		};
		A11420082392CDBA003E7E4B /* 1143. Longest Common Subsequence */ = {
			isa = PBXGroup;
			children = (
				A11420092392CDC1003E7E4B /* 1143. Longest Common Subsequence.h */,
			);
			path = "1143. Longest Common Subsequence";
			sourceTree = "<group>";
		};
		A114200E23940AF2003E7E4B /* 1247. Minimum Swaps to Make Strings Equal */ = {
			isa = PBXGroup;
			children = (
				A114200F23940AFC003E7E4B /* 1247. Minimum Swaps to Make Strings Equal.h */,
			);
			path = "1247. Minimum Swaps to Make Strings Equal";
			sourceTree = "<group>";
		};
		A114201123941397003E7E4B /* 1273. Delete Tree Nodes */ = {
			isa = PBXGroup;
			children = (
				A114201023941387003E7E4B /* 1273. Delete Tree Nodes.h */,
			);
			path = "1273. Delete Tree Nodes";
			sourceTree = "<group>";
		};
		A1142012239413AC003E7E4B /* 1190. Reverse Substrings Between Each Pair of Parentheses */ = {
			isa = PBXGroup;
			children = (
				A1141FFD238A6FD1003E7E4B /* 1190. Reverse Substrings Between Each Pair of Parentheses.h */,
			);
			path = "1190. Reverse Substrings Between Each Pair of Parentheses";
			sourceTree = "<group>";
		};
		A114201323941C97003E7E4B /* 609. Find Duplicate File in System */ = {
			isa = PBXGroup;
			children = (
				A114201423941C9C003E7E4B /* 609. Find Duplicate File in System.h */,
			);
			path = "609. Find Duplicate File in System";
			sourceTree = "<group>";
		};
		A114201523956ECB003E7E4B /* 1017. Convert to Base -2  */ = {
			isa = PBXGroup;
			children = (
				A114201623956EDA003E7E4B /* 1017. Convert to Base -2 .h */,
			);
			path = "1017. Convert to Base -2 ";
			sourceTree = "<group>";
		};
		A114201723957F00003E7E4B /* 1105. Filling Bookcase Shelves */ = {
			isa = PBXGroup;
			children = (
				A114201823957F06003E7E4B /* 1105. Filling Bookcase Shelves.h */,
			);
			path = "1105. Filling Bookcase Shelves";
			sourceTree = "<group>";
		};
		A11420192396C6D4003E7E4B /* 1094. Car Pooling */ = {
			isa = PBXGroup;
			children = (
				A114201A2396C6DD003E7E4B /* 1094. Car Pooling.h */,
			);
			path = "1094. Car Pooling";
			sourceTree = "<group>";
		};
		A114201B2398092D003E7E4B /* 1019. Next Greater Node In Linked List */ = {
			isa = PBXGroup;
			children = (
				A114201C23980933003E7E4B /* 1019. Next Greater Node In Linked List.h */,
			);
			path = "1019. Next Greater Node In Linked List";
			sourceTree = "<group>";
		};
		A114201D2398178F003E7E4B /* 78. Subsets */ = {
			isa = PBXGroup;
			children = (
				A114201E23981795003E7E4B /* 78. Subsets.h */,
			);
			path = "78. Subsets";
			sourceTree = "<group>";
		};
		A114201F23981D09003E7E4B /* 236. Lowest Common Ancestor of a Binary Tree */ = {
			isa = PBXGroup;
			children = (
				A114202023981D0F003E7E4B /* 236. Lowest Common Ancestor of a Binary Tree.h */,
			);
			path = "236. Lowest Common Ancestor of a Binary Tree";
			sourceTree = "<group>";
		};
		A114202123996CAB003E7E4B /* 1209. Remove All Adjacent Duplicates in String II */ = {
			isa = PBXGroup;
			children = (
				A114202223996CB0003E7E4B /* 1209. Remove All Adjacent Duplicates in String II.h */,
			);
			path = "1209. Remove All Adjacent Duplicates in String II";
			sourceTree = "<group>";
		};
		A114202323997521003E7E4B /* 712. Minimum ASCII Delete Sum for Two Strings */ = {
			isa = PBXGroup;
			children = (
				A114202423997526003E7E4B /* 712. Minimum ASCII Delete Sum for Two Strings.h */,
			);
			path = "712. Minimum ASCII Delete Sum for Two Strings";
			sourceTree = "<group>";
		};
		A1142025239DDEA5003E7E4B /* 789. Escape The Ghosts */ = {
			isa = PBXGroup;
			children = (
				A1142026239DDEAC003E7E4B /* 789. Escape The Ghosts.h */,
			);
			path = "789. Escape The Ghosts";
			sourceTree = "<group>";
		};
		A1142027239DE6AE003E7E4B /* 526. Beautiful Arrangement */ = {
			isa = PBXGroup;
			children = (
				A1142028239DE6B5003E7E4B /* 526. Beautiful Arrangement.h */,
			);
			path = "526. Beautiful Arrangement";
			sourceTree = "<group>";
		};
		A1142029239DED7E003E7E4B /* 547. Friend Circles */ = {
			isa = PBXGroup;
			children = (
				A114202A239DED85003E7E4B /* 547. Friend Circles.h */,
			);
			path = "547. Friend Circles";
			sourceTree = "<group>";
		};
		A117650626D2A720008AC339 /* 56. Merge Intervals */ = {
			isa = PBXGroup;
			children = (
				A117650726D2A728008AC339 /* 56. Merge Intervals.h */,
			);
			path = "56. Merge Intervals";
			sourceTree = "<group>";
		};
		A117650826D2B14E008AC339 /* 57. Insert Interval */ = {
			isa = PBXGroup;
			children = (
				A117650926D2B153008AC339 /* 57. Insert Interval.h */,
			);
			path = "57. Insert Interval";
			sourceTree = "<group>";
		};
		A11B547C235A23F800A04D02 /* 1161. Maximum Level Sum of a Binary Tree */ = {
			isa = PBXGroup;
			children = (
				A11B547D235A240600A04D02 /* 1161. Maximum Level Sum of a Binary Tree.h */,
			);
			path = "1161. Maximum Level Sum of a Binary Tree";
			sourceTree = "<group>";
		};
		A11B547E235A2AFF00A04D02 /* 1104. Path In Zigzag Labelled Binary Tree */ = {
			isa = PBXGroup;
			children = (
				A11B547F235A2B0800A04D02 /* 1104. Path In Zigzag Labelled Binary Tree.h */,
			);
			path = "1104. Path In Zigzag Labelled Binary Tree";
			sourceTree = "<group>";
		};
		A128B8B3235E09F5008674AD /* 1222. Queens That Can Attack the King */ = {
			isa = PBXGroup;
			children = (
				A128B8B4235E0A54008674AD /* 1222. Queens That Can Attack the King.h */,
			);
			path = "1222. Queens That Can Attack the King";
			sourceTree = "<group>";
		};
		A128B8B5235E1F58008674AD /* 979. Distribute Coins in Binary Tree */ = {
			isa = PBXGroup;
			children = (
				A128B8B6235E1F5F008674AD /* 979. Distribute Coins in Binary Tree.h */,
			);
			path = "979. Distribute Coins in Binary Tree";
			sourceTree = "<group>";
		};
		A12C28922301BC0200A4554E /* 877. Stone Game */ = {
			isa = PBXGroup;
			children = (
				A12C28932301BC2600A4554E /* 877. Stone Game.h */,
			);
			path = "877. Stone Game";
			sourceTree = "<group>";
		};
		A12C289423095F1100A4554E /* 2. Add Two Numbers */ = {
			isa = PBXGroup;
			children = (
				A12C289523095F3D00A4554E /* 2. Add Two Numbers.h */,
			);
			path = "2. Add Two Numbers";
			sourceTree = "<group>";
		};
		A12C8AD923411E4C000036C8 /* 1108. Defanging an IP Address */ = {
			isa = PBXGroup;
			children = (
				A12C8ADA23411E6B000036C8 /* 1108. Defanging an IP Address.h */,
			);
			path = "1108. Defanging an IP Address";
			sourceTree = "<group>";
		};
		A12C8ADB23412336000036C8 /* 938. Range Sum of BST */ = {
			isa = PBXGroup;
			children = (
				A12C8ADC23412343000036C8 /* 938. Range Sum of BST.h */,
			);
			path = "938. Range Sum of BST";
			sourceTree = "<group>";
		};
		A12C8AE123426EB7000036C8 /* 771. Jewels and Stones */ = {
			isa = PBXGroup;
			children = (
				A12C8AE223426EC5000036C8 /* 771. Jewels and Stones.h */,
			);
			path = "771. Jewels and Stones";
			sourceTree = "<group>";
		};
		A12C8AE3234271DB000036C8 /* 709. To Lower Case */ = {
			isa = PBXGroup;
			children = (
				A12C8AE4234271E5000036C8 /* 709. To Lower Case.h */,
			);
			path = "709. To Lower Case";
			sourceTree = "<group>";
		};
		A12C8AE523427639000036C8 /* 665. Non-decreasing Array */ = {
			isa = PBXGroup;
			children = (
				A12C8AE623427645000036C8 /* 665. Non-decreasing Array.h */,
			);
			path = "665. Non-decreasing Array";
			sourceTree = "<group>";
		};
		A12C8AE72344F6C9000036C8 /* 707. Design Linked List */ = {
			isa = PBXGroup;
			children = (
				A12C8AE82344F6E7000036C8 /* 707. Design Linked List.h */,
			);
			path = "707. Design Linked List";
			sourceTree = "<group>";
		};
		A12C8AE9234503BC000036C8 /* 859. Buddy Strings */ = {
			isa = PBXGroup;
			children = (
				A12C8AEA234503CA000036C8 /* 859. Buddy Strings.h */,
			);
			path = "859. Buddy Strings";
			sourceTree = "<group>";
		};
		A12C8AEB23450D8C000036C8 /* 532. K-diff Pairs in an Array */ = {
			isa = PBXGroup;
			children = (
				A12C8AEC23450D98000036C8 /* 532. K-diff Pairs in an Array.h */,
			);
			path = "532. K-diff Pairs in an Array";
			sourceTree = "<group>";
		};
		A12C8AED234A55BE000036C8 /* 605. Can Place Flowers */ = {
			isa = PBXGroup;
			children = (
				A12C8AEE234A55CC000036C8 /* 605. Can Place Flowers.h */,
			);
			path = "605. Can Place Flowers";
			sourceTree = "<group>";
		};
		A12C8AEF234B9273000036C8 /* 581. Shortest Unsorted Continuous Subarray */ = {
			isa = PBXGroup;
			children = (
				A12C8AF0234B927F000036C8 /* 581. Shortest Unsorted Continuous Subarray.h */,
			);
			path = "581. Shortest Unsorted Continuous Subarray";
			sourceTree = "<group>";
		};
		A12C8AF3234BA0F6000036C8 /* 686. Repeated String Match */ = {
			isa = PBXGroup;
			children = (
				A12C8AF4234BA0FF000036C8 /* 686. Repeated String Match.h */,
			);
			path = "686. Repeated String Match";
			sourceTree = "<group>";
		};
		A12EFCAC26C9808D00E04EE1 /* 97. Interleaving String */ = {
			isa = PBXGroup;
			children = (
				A12EFCAD26C9809200E04EE1 /* 97. Interleaving String.h */,
			);
			path = "97. Interleaving String";
			sourceTree = "<group>";
		};
		A12EFCAE26CAD41300E04EE1 /* 92. Reverse Linked List II */ = {
			isa = PBXGroup;
			children = (
				A12EFCAF26CAD41C00E04EE1 /* 92. Reverse Linked List II.h */,
			);
			path = "92. Reverse Linked List II";
			sourceTree = "<group>";
		};
		A12EFCB026CC261800E04EE1 /* 93. Restore IP Addresses */ = {
			isa = PBXGroup;
			children = (
				A12EFCB126CC262200E04EE1 /* 93. Restore IP Addresses.h */,
			);
			path = "93. Restore IP Addresses";
			sourceTree = "<group>";
		};
		A13B50AA23B514F100989E54 /* 1023. Camelcase Matching */ = {
			isa = PBXGroup;
			children = (
				A13B50AB23B514FA00989E54 /* 1023. Camelcase Matching.h */,
			);
			path = "1023. Camelcase Matching";
			sourceTree = "<group>";
		};
		A13B50AC23B51A2400989E54 /* 1020. Number of Enclaves */ = {
			isa = PBXGroup;
			children = (
				A13B50AD23B51A2B00989E54 /* 1020. Number of Enclaves.h */,
			);
			path = "1020. Number of Enclaves";
			sourceTree = "<group>";
		};
		A13B50AE23B66B7200989E54 /* 835. Image Overlap  */ = {
			isa = PBXGroup;
			children = (
				A13B50AF23B66B7700989E54 /* 835. Image Overlap .h */,
			);
			path = "835. Image Overlap ";
			sourceTree = "<group>";
		};
		A13B50B023B674DF00989E54 /* 947. Most Stones Removed with Same Row or Column */ = {
			isa = PBXGroup;
			children = (
				A13B50B123B674E500989E54 /* 947. Most Stones Removed with Same Row or Column.h */,
			);
			path = "947. Most Stones Removed with Same Row or Column";
			sourceTree = "<group>";
		};
		A13FC03D23B283C2003DAA17 /* 919. Complete Binary Tree Inserter */ = {
			isa = PBXGroup;
			children = (
				A13FC03E23B283C8003DAA17 /* 919. Complete Binary Tree Inserter.h */,
			);
			path = "919. Complete Binary Tree Inserter";
			sourceTree = "<group>";
		};
		A13FC03F23B3C569003DAA17 /* 932. Beautiful Array */ = {
			isa = PBXGroup;
			children = (
				A13FC04023B3C571003DAA17 /* 932. Beautiful Array.h */,
			);
			path = "932. Beautiful Array";
			sourceTree = "<group>";
		};
		A13FC04123B3CB9C003DAA17 /* 1031. Maximum Sum of Two Non-Overlapping Subarrays */ = {
			isa = PBXGroup;
			children = (
				A13FC04223B3CBA4003DAA17 /* 1031. Maximum Sum of Two Non-Overlapping Subarrays.h */,
			);
			path = "1031. Maximum Sum of Two Non-Overlapping Subarrays";
			sourceTree = "<group>";
		};
		A141C4DB26E679820038BFC4 /* 71. Simplify Path */ = {
			isa = PBXGroup;
			children = (
				A141C4DC26E6798A0038BFC4 /* 71. Simplify Path.h */,
			);
			path = "71. Simplify Path";
			sourceTree = "<group>";
		};
		A141CB81235C47A6006E38C4 /* 921. Minimum Add to Make Parentheses Valid */ = {
			isa = PBXGroup;
			children = (
				A141CB82235C47B1006E38C4 /* 921. Minimum Add to Make Parentheses Valid.h */,
			);
			path = "921. Minimum Add to Make Parentheses Valid";
			sourceTree = "<group>";
		};
		A14F44F326CD74D800953CC3 /* 91. Decode Ways */ = {
			isa = PBXGroup;
			children = (
				A14F44F426CD74EA00953CC3 /* 91. Decode Ways .h */,
			);
			path = "91. Decode Ways";
			sourceTree = "<group>";
		};
		A14F44F526CD7B1600953CC3 /* 639. Decode Ways II */ = {
			isa = PBXGroup;
			children = (
				A14F44F626CD7B2100953CC3 /* 639. Decode Ways II.h */,
			);
			path = "639. Decode Ways II";
			sourceTree = "<group>";
		};
		A15842382365F74500AA3F4A /* 986. Interval List Intersections */ = {
			isa = PBXGroup;
			children = (
				A15842392365F74C00AA3F4A /* 986. Interval List Intersections.h */,
			);
			path = "986. Interval List Intersections";
			sourceTree = "<group>";
		};
		A1607854235F6ADF00BF651E /* 885. Spiral Matrix III */ = {
			isa = PBXGroup;
			children = (
				A1607855235F6AE900BF651E /* 885. Spiral Matrix III.h */,
			);
			path = "885. Spiral Matrix III";
			sourceTree = "<group>";
		};
		A1607856235F6B6000BF651E /* 537. Complex Number Multiplication */ = {
			isa = PBXGroup;
			children = (
				A1607857235F6B6600BF651E /* 537. Complex Number Multiplication.h */,
			);
			path = "537. Complex Number Multiplication";
			sourceTree = "<group>";
		};
		A164FE5023B1306300155D85 /* 529. Minesweeper */ = {
			isa = PBXGroup;
			children = (
				A164FE5123B1306C00155D85 /* 529. Minesweeper.h */,
			);
			path = "529. Minesweeper";
			sourceTree = "<group>";
		};
		A169986522FEBF6200F640E5 = {
			isa = PBXGroup;
			children = (
				A169987822FEBF7300F640E5 /* alog */,
				A169987022FEBF6200F640E5 /* leetcode */,
				A169986F22FEBF6200F640E5 /* Products */,
			);
			sourceTree = "<group>";
		};
		A169986F22FEBF6200F640E5 /* Products */ = {
			isa = PBXGroup;
			children = (
				A169986E22FEBF6200F640E5 /* leetcode */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		A169987022FEBF6200F640E5 /* leetcode */ = {
			isa = PBXGroup;
			children = (
				A169987122FEBF6200F640E5 /* main.cpp */,
			);
			path = leetcode;
			sourceTree = "<group>";
		};
		A169987822FEBF7300F640E5 /* alog */ = {
			isa = PBXGroup;
			children = (
				A17F71A526EBC82A00E51168 /* 63. Unique Paths II */,
				A141C4DB26E679820038BFC4 /* 71. Simplify Path */,
				A1B4B0A526E52E0A00C6D7FB /* 77. Combinations */,
				A1FFD64F26DA1D090006B1DF /* 80. Remove Duplicates from Sorted Array II */,
				A1FFD64D26DA19E40006B1DF /* 82. Remove Duplicates from Sorted List II */,
				A1FFD64B26D8E1480006B1DF /* 75. Sort Colors */,
				A1FFD64926D8D8DE0006B1DF /* 73. Set Matrix Zeroes */,
				A1FFD64726D8D6920006B1DF /* 64. Minimum Path Sum */,
				A1FFD64526D8D3C80006B1DF /* 59. Spiral Matrix II */,
				A117650826D2B14E008AC339 /* 57. Insert Interval */,
				A117650626D2A720008AC339 /* 56. Merge Intervals */,
				A10FC9C726D0EED70026A39E /* 16. 3Sum Closest */,
				A10FC9C526D0E9F40026A39E /* 86. Partition List */,
				A1A8E28B26CEC0AE008233E8 /* 90. Subsets II */,
				A14F44F526CD7B1600953CC3 /* 639. Decode Ways II */,
				A14F44F326CD74D800953CC3 /* 91. Decode Ways */,
				A12EFCB026CC261800E04EE1 /* 93. Restore IP Addresses */,
				A12EFCAE26CAD41300E04EE1 /* 92. Reverse Linked List II */,
				A12EFCAC26C9808D00E04EE1 /* 97. Interleaving String */,
				A1CE71B826B7092B00D78675 /* 199. Binary Tree Right Side View */,
				A1CE71B626B69F3400D78675 /* 200. Number of Islands */,
				A1CE71B426B697FC00D78675 /* 54. Spiral Matrix */,
				A1CE71B226B6961300D78675 /* 53. Maximum Subarray */,
				A1CE71B026B689AF00D78675 /* 42. Trapping Rain Water */,
				A1CE71AE26B685D000D78675 /* 121. Best Time to Buy and Sell Stock */,
				A1CE71AC26B3176F00D78675 /* 15. 3Sum */,
				A1CE71AA26B1D7DC00D78675 /* 25. Reverse Nodes in k-Group */,
				A1CE71A826B1AE9700D78675 /* 33. Search in Rotated Sorted Array */,
				A1CE71A626AF2C1C00D78675 /* 146. LRU Cache */,
				A1CE71A426AD483200D78675 /* 1630. Arithmetic Subarrays */,
				A1CE71A226AD430700D78675 /* 1305. All Elements in Two Binary Search Trees */,
				A1CE71A026AC8E1500D78675 /* 1605. Find Valid Matrix Given Row and Column Sums */,
				A1CE719E26AC3BA300D78675 /* 5. Longest Palindromic Substring */,
				A1CE719C26A9E51500D78675 /* 3. Longest Substring Without Repeating Characters */,
				A18F21C426A9DBB7009EB007 /* 1817. Finding the Users Active Minutes */,
				A18F21C226A9D9B7009EB007 /* 1877. Minimize Maximum Pair Sum in Array */,
				A18F21C026A9D358009EB007 /* 1551. Minimum Operations to Make Array Equal */,
				A18F21BE26A88E55009EB007 /* 1329. Sort the Matrix Diagonally */,
				A18F21BC26A88928009EB007 /* 1409. Queries on a Permutation With Key */,
				A18F21BA26A74212009EB007 /* 1637. Widest Vertical Area Between Two Points Containing No Points */,
				A18F21B826A73EAA009EB007 /* 1282. Group the People Given the Group Size They Belong To */,
				A18F21B626A73CC7009EB007 /* 1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree */,
				A18F21B426A5F110009EB007 /* 1769. Minimum Number of Operations to Move All Balls to Each Box */,
				A18F21B226A5EA3F009EB007 /* 1828. Queries on Number of Points Inside a Circle */,
				A18F21B026A49C79009EB007 /* 1476. Subrectangle Queries */,
				A18F21AE26A497FA009EB007 /* 1689. Partitioning Into Minimum Number Of Deci-Binary Numbers */,
				A1DD0DAB24AF94C400588495 /* 99. Recover Binary Search Tree */,
				A1DD0DA924AF8E2600588495 /* 98. Validate Binary Search Tree */,
				A1DD0DA724AE3DCC00588495 /* 105. Construct Binary Tree from Preorder and Inorder Traversal */,
				A1DD0DA524ACF23300588495 /* 103. Binary Tree Zigzag Level Order Traversal */,
				A1DD0DA324AA460300588495 /* 61. Rotate List */,
				A1DD0DA124A9025500588495 /* 96. Unique Binary Search Trees */,
				A1DF72142497CB570078909E /* 617. Merge Two Binary Trees */,
				A1C38D4424913ED20090D3C3 /* 142. Linked List Cycle II */,
				A1C38D42248EAB3C0090D3C3 /* 109. Convert Sorted List to Binary Search Tree */,
				A1C38D40248E97B30090D3C3 /* 725. Split Linked List in Parts */,
				A1C38D3E248D22D40090D3C3 /* 430. Flatten a Multilevel Doubly Linked List */,
				A1A81B25248D15E700C83603 /* 445. Add Two Numbers II */,
				A1A81B2024880C1D00C83603 /* 1415. The k-th Lexicographical String of All Happy Strings of Length n */,
				A1A81B1E248805E200C83603 /* 1325. Delete Leaves With a Given Value */,
				A1A81B1C24856B9E00C83603 /* 1263. Minimum Moves to Move a Box to Their Target Location */,
				A1A81B1A2485530600C83603 /* 876. Middle of the Linked List */,
				A1A81B18248551CB00C83603 /* 1290. Convert Binary Number in a Linked List to Integer */,
				A1A81B162483E07000C83603 /* 1302. Deepest Leaves Sum */,
				A1A81B142483DB3200C83603 /* 1315. Sum of Nodes with Even-Valued Grandparent */,
				A1A81B122483B17A00C83603 /* 1002. Find Common Characters */,
				A1816F19248398E200F4C1DF /* 443. String Compression */,
				A16B580E23C2522800BC7028 /* 85. Maximal Rectangle */,
				A16B580B23BFAA5300BC7028 /* 1003. Check If Word Is Valid After Substitutions */,
				A196AC4D23BE560000A37EB8 /* 1052. Grumpy Bookstore Owner */,
				A196AC4B23BBB27700A37EB8 /* 1268. Search Suggestions System */,
				A196AC4923BBAD9B00A37EB8 /* 1116. Print Zero Even Odd */,
				A196AC4723BA60C000A37EB8 /* 648. Replace Words */,
				A196AC4523BA5C0800A37EB8 /* 565. Array Nesting */,
				A196AC4323B9077300A37EB8 /* 684. Redundant Connection */,
				A196AC4123B8FA6900A37EB8 /* 1233. Remove Sub-Folders from the Filesystem */,
				A13B50B023B674DF00989E54 /* 947. Most Stones Removed with Same Row or Column */,
				A13B50AE23B66B7200989E54 /* 835. Image Overlap  */,
				A13B50AC23B51A2400989E54 /* 1020. Number of Enclaves */,
				A13B50AA23B514F100989E54 /* 1023. Camelcase Matching */,
				A13FC04123B3CB9C003DAA17 /* 1031. Maximum Sum of Two Non-Overlapping Subarrays */,
				A13FC03F23B3C569003DAA17 /* 932. Beautiful Array */,
				A13FC03D23B283C2003DAA17 /* 919. Complete Binary Tree Inserter */,
				A164FE5023B1306300155D85 /* 529. Minesweeper */,
				A1B3C31F23ABE7C800C0B217 /* 553. Optimal Division */,
				A1A7972023AA939100A7B758 /* 1011. Capacity To Ship Packages Within D Days */,
				A1A7971E23AA8CD500A7B758 /* 817. Linked List Components */,
				A1A7971C23A93A7700A7B758 /* 508. Most Frequent Subtree Sum */,
				A1142029239DED7E003E7E4B /* 547. Friend Circles */,
				A1142027239DE6AE003E7E4B /* 526. Beautiful Arrangement */,
				A1142025239DDEA5003E7E4B /* 789. Escape The Ghosts */,
				A114202323997521003E7E4B /* 712. Minimum ASCII Delete Sum for Two Strings */,
				A114202123996CAB003E7E4B /* 1209. Remove All Adjacent Duplicates in String II */,
				A114201F23981D09003E7E4B /* 236. Lowest Common Ancestor of a Binary Tree */,
				A114201D2398178F003E7E4B /* 78. Subsets */,
				A114201B2398092D003E7E4B /* 1019. Next Greater Node In Linked List */,
				A11420192396C6D4003E7E4B /* 1094. Car Pooling */,
				A114201723957F00003E7E4B /* 1105. Filling Bookcase Shelves */,
				A114201523956ECB003E7E4B /* 1017. Convert to Base -2  */,
				A114201323941C97003E7E4B /* 609. Find Duplicate File in System */,
				A1142012239413AC003E7E4B /* 1190. Reverse Substrings Between Each Pair of Parentheses */,
				A114201123941397003E7E4B /* 1273. Delete Tree Nodes */,
				A114200E23940AF2003E7E4B /* 1247. Minimum Swaps to Make Strings Equal */,
				A11420082392CDBA003E7E4B /* 1143. Longest Common Subsequence */,
				A1142006239029D3003E7E4B /* 540. Single Element in a Sorted Array */,
				A1142004238ECCF6003E7E4B /* 347. Top K Frequent Elements */,
				A1142002238D8A49003E7E4B /* 1115. Print FooBar Alternately */,
				A1142000238C3735003E7E4B /* 1090. Largest Values From Labels */,
				A1141FFE238C32DC003E7E4B /* 1267. Count Servers that Communicate */,
				A1141FFB238A6C27003E7E4B /* 983. Minimum Cost For Tickets */,
				A1141FF92386F764003E7E4B /* 1004. Max Consecutive Ones III */,
				A1141FF723844C78003E7E4B /* 856. Score of Parentheses */,
				A1141FF5238301C9003E7E4B /* 1238. Circular Permutation in Binary Representation */,
				A1141FF323813004003E7E4B /* 865. Smallest Subtree with all the Deepest Nodes */,
				A1141FF123805BE6003E7E4B /* 515. Find Largest Value in Each Tree Row */,
				A1141FEE237F0F25003E7E4B /* 946. Validate Stack Sequences */,
				A1141FEC237F05DC003E7E4B /* 647. Palindromic Substrings  */,
				A1141FEA237DBA8C003E7E4B /* 1249. Minimum Remove to Make Valid Parentheses */,
				A1141FE8237DB6EE003E7E4B /* 1016. Binary String With Substrings Representing 1 To N */,
				A1141FE6237C66B1003E7E4B /* 427. Construct Quad Tree */,
				A1141FE4237B122C003E7E4B /* 1219. Path with Maximum Gold */,
				A1141FE22379CB7A003E7E4B /* 1254. Number of Closed Islands */,
				A1141FE02379BCEA003E7E4B /* 1072. Flip Columns For Maximum Number of Equal Rows */,
				A1141FDE23786044003E7E4B /* 695. Max Area of Island */,
				A1141FDC23785415003E7E4B /* 931. Minimum Falling Path Sum */,
				A1141FDA2375C49F003E7E4B /* 513. Find Bottom Left Tree Value */,
				A1141FD82375C3F7003E7E4B /* 1140. Stone Game II */,
				A1141FD62374820B003E7E4B /* 739. Daily Temperatures  */,
				A1141FD4237333F5003E7E4B /* 429. N-ary Tree Level Order Traversal */,
				A1141FD22371DE43003E7E4B /* 1227. Airplane Seat Assignment Probability */,
				A1141FD02371D8A4003E7E4B /* 998. Maximum Binary Tree II */,
				A1141FCE23709243003E7E4B /* 973. K Closest Points to Origin */,
				A1141FCC2370862D003E7E4B /* 841. Keys and Rooms  */,
				A1EA249E236EB29A009BAE43 /* 1026. Maximum Difference Between Node and Ancestor */,
				A1EA249C236EB264009BAE43 /* 1130. Minimum Cost Tree From Leaf Values */,
				A1EA249A236DF902009BAE43 /* 889. Construct Binary Tree from Preorder and Postorder Traversal */,
				A1EA2498236DEEEB009BAE43 /* 969. Pancake Sorting */,
				A1EA2496236C9DF2009BAE43 /* 1043. Partition Array for Maximum Sum */,
				A1EA2494236C9DBE009BAE43 /* 912. Sort an Array  */,
				A1EA2492236B43A3009BAE43 /* 791. Custom Sort String */,
				A1EA24902369F17A009BAE43 /* 959. Regions Cut By Slashes */,
				A15842382365F74500AA3F4A /* 986. Interval List Intersections */,
				A1B71FEA2365913000EB34CC /* 1110. Delete Nodes And Return Forest */,
				A171BAA823635ADD00B5061F /* 1123. Lowest Common Ancestor of Deepest Leaves */,
				A171BAA62363564300B5061F /* 951. Flip Equivalent Binary Trees */,
				A171BAA22363550C00B5061F /* 1025.Divisor Game */,
				A171BAA1236354FA00B5061F /* 746. Min Cost Climbing Stairs */,
				A1607856235F6B6000BF651E /* 537. Complex Number Multiplication */,
				A1607854235F6ADF00BF651E /* 885. Spiral Matrix III */,
				A128B8B5235E1F58008674AD /* 979. Distribute Coins in Binary Tree */,
				A128B8B3235E09F5008674AD /* 1222. Queens That Can Attack the King */,
				A1C05EA5235CA1D90077F738 /* 1111. Maximum Nesting Depth of Two Valid Parentheses Strings */,
				A1C05EA3235C91570077F738 /* 861. Score After Flipping Matrix */,
				A141CB81235C47A6006E38C4 /* 921. Minimum Add to Make Parentheses Valid */,
				A11B547E235A2AFF00A04D02 /* 1104. Path In Zigzag Labelled Binary Tree */,
				A11B547C235A23F800A04D02 /* 1161. Maximum Level Sum of a Binary Tree */,
				A1DD71D52358CD81003E8052 /* 894. All Possible Full Binary Trees */,
				A1DD71D32358C594003E8052 /* 890. Find and Replace Pattern */,
				A1DD71D123577CBD003E8052 /* 797. All Paths From Source to Target */,
				A1DD71CF23577810003E8052 /* 814. Binary Tree Pruning */,
				A1DD71CD23562D67003E8052 /* 763. Partition Labels */,
				A1DD71CB23561D9A003E8052 /* 950. Reveal Cards In Increasing Order */,
				A1DD71C92354DA52003E8052 /* 1008. Construct Binary Search Tree from Preorder Traversal */,
				A1DD71C6235381C6003E8052 /* 1079. Letter Tile Possibilities */,
				A1DD71C323524B61003E8052 /* 654. Maximum Binary Tree */,
				A1DD71C023524787003E8052 /* 701. Insert into a Binary Search Tree */,
				A1DD71BE23523B6B003E8052 /* 535. Encode and Decode TinyURL */,
				A1DD71BC2350E8BA003E8052 /* 1038. Binary Search Tree to Greater Sum Tree */,
				A1DD71BA234F9778003E8052 /* 807. Max Increase to Keep City Skyline */,
				A1DD7198234CFBEA003E8052 /* 874. Walking Robot Simulation */,
				A1DD7196234CF613003E8052 /* 633. Sum of Square Numbers */,
				A1DD7194234CEC50003E8052 /* 69. Sqrt(x) */,
				A12C8AF3234BA0F6000036C8 /* 686. Repeated String Match */,
				A12C8AEF234B9273000036C8 /* 581. Shortest Unsorted Continuous Subarray */,
				A12C8AED234A55BE000036C8 /* 605. Can Place Flowers */,
				A12C8AEB23450D8C000036C8 /* 532. K-diff Pairs in an Array */,
				A12C8AE9234503BC000036C8 /* 859. Buddy Strings */,
				A12C8AE72344F6C9000036C8 /* 707. Design Linked List */,
				A12C8AE523427639000036C8 /* 665. Non-decreasing Array */,
				A12C8AE3234271DB000036C8 /* 709. To Lower Case */,
				A12C8AE123426EB7000036C8 /* 771. Jewels and Stones */,
				A12C8ADB23412336000036C8 /* 938. Range Sum of BST */,
				A12C8AD923411E4C000036C8 /* 1108. Defanging an IP Address */,
				A12C289423095F1100A4554E /* 2. Add Two Numbers */,
				A12C28922301BC0200A4554E /* 877. Stone Game */,
				A169987E22FECD1900F640E5 /* 746. Min Cost Climbing Stairs */,
				A169987922FEC05000F640E5 /* 1025.Divisor Game */,
				A12C8ADD234124DC000036C8 /* DataStructures.h */,
			);
			path = alog;
			sourceTree = "<group>";
		};
		A169987922FEC05000F640E5 /* 1025.Divisor Game */ = {
			isa = PBXGroup;
			children = (
				A169987A22FEC07C00F640E5 /* 1025. Divisor Game.h */,
				A169987B22FEC18700F640E5 /* README.md */,
			);
			name = "1025.Divisor Game";
			path = "../../1025.Divisor Game";
			sourceTree = "<group>";
		};
		A169987E22FECD1900F640E5 /* 746. Min Cost Climbing Stairs */ = {
			isa = PBXGroup;
			children = (
				A169987F22FECD1900F640E5 /* 746. Min Cost Climbing Stairs.h */,
			);
			name = "746. Min Cost Climbing Stairs";
			path = "../../746. Min Cost Climbing Stairs";
			sourceTree = "<group>";
		};
		A16B580B23BFAA5300BC7028 /* 1003. Check If Word Is Valid After Substitutions */ = {
			isa = PBXGroup;
			children = (
				A16B580C23BFAA5B00BC7028 /* 1003. Check If Word Is Valid After Substitutions.h */,
			);
			path = "1003. Check If Word Is Valid After Substitutions";
			sourceTree = "<group>";
		};
		A16B580E23C2522800BC7028 /* 85. Maximal Rectangle */ = {
			isa = PBXGroup;
			children = (
				A16B580F23C2522F00BC7028 /* 85. Maximal Rectangle.h */,
			);
			path = "85. Maximal Rectangle";
			sourceTree = "<group>";
		};
		A171BAA1236354FA00B5061F /* 746. Min Cost Climbing Stairs */ = {
			isa = PBXGroup;
			children = (
				A171BAA32363552900B5061F /* 746. Min Cost Climbing Stairs.h */,
			);
			path = "746. Min Cost Climbing Stairs";
			sourceTree = "<group>";
		};
		A171BAA22363550C00B5061F /* 1025.Divisor Game */ = {
			isa = PBXGroup;
			children = (
				A171BAA42363553400B5061F /* 1025. Divisor Game.h */,
				A171BAA52363553B00B5061F /* README.md */,
			);
			path = "1025.Divisor Game";
			sourceTree = "<group>";
		};
		A171BAA62363564300B5061F /* 951. Flip Equivalent Binary Trees */ = {
			isa = PBXGroup;
			children = (
				A171BAA72363565900B5061F /* 951. Flip Equivalent Binary Trees.h */,
			);
			path = "951. Flip Equivalent Binary Trees";
			sourceTree = "<group>";
		};
		A171BAA823635ADD00B5061F /* 1123. Lowest Common Ancestor of Deepest Leaves */ = {
			isa = PBXGroup;
			children = (
				A171BAA923635AEE00B5061F /* 1123. Lowest Common Ancestor of Deepest Leaves.h */,
			);
			path = "1123. Lowest Common Ancestor of Deepest Leaves";
			sourceTree = "<group>";
		};
		A17F71A526EBC82A00E51168 /* 63. Unique Paths II */ = {
			isa = PBXGroup;
			children = (
				A17F71A626EBC83400E51168 /* 63. Unique Paths II.h */,
			);
			path = "63. Unique Paths II";
			sourceTree = "<group>";
		};
		A1816F19248398E200F4C1DF /* 443. String Compression */ = {
			isa = PBXGroup;
			children = (
				A1816F1A2483994000F4C1DF /* 443. String Compression.h */,
			);
			path = "443. String Compression";
			sourceTree = "<group>";
		};
		A18F21AE26A497FA009EB007 /* 1689. Partitioning Into Minimum Number Of Deci-Binary Numbers */ = {
			isa = PBXGroup;
			children = (
				A18F21AF26A49810009EB007 /* 1689. Partitioning Into Minimum Number Of Deci-Binary Numbers.h */,
			);
			path = "1689. Partitioning Into Minimum Number Of Deci-Binary Numbers";
			sourceTree = "<group>";
		};
		A18F21B026A49C79009EB007 /* 1476. Subrectangle Queries */ = {
			isa = PBXGroup;
			children = (
				A18F21B126A49C8B009EB007 /* 1476. Subrectangle Queries.h */,
			);
			path = "1476. Subrectangle Queries";
			sourceTree = "<group>";
		};
		A18F21B226A5EA3F009EB007 /* 1828. Queries on Number of Points Inside a Circle */ = {
			isa = PBXGroup;
			children = (
				A18F21B326A5EA47009EB007 /* 1828. Queries on Number of Points Inside a Circle.h */,
			);
			path = "1828. Queries on Number of Points Inside a Circle";
			sourceTree = "<group>";
		};
		A18F21B426A5F110009EB007 /* 1769. Minimum Number of Operations to Move All Balls to Each Box */ = {
			isa = PBXGroup;
			children = (
				A18F21B526A5F117009EB007 /* 1769. Minimum Number of Operations to Move All Balls to Each Box.h */,
			);
			path = "1769. Minimum Number of Operations to Move All Balls to Each Box";
			sourceTree = "<group>";
		};
		A18F21B626A73CC7009EB007 /* 1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree */ = {
			isa = PBXGroup;
			children = (
				A18F21B726A73CD5009EB007 /* 1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree.h */,
			);
			path = "1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree";
			sourceTree = "<group>";
		};
		A18F21B826A73EAA009EB007 /* 1282. Group the People Given the Group Size They Belong To */ = {
			isa = PBXGroup;
			children = (
				A18F21B926A73EB1009EB007 /* 1282. Group the People Given the Group Size They Belong To.h */,
			);
			path = "1282. Group the People Given the Group Size They Belong To";
			sourceTree = "<group>";
		};
		A18F21BA26A74212009EB007 /* 1637. Widest Vertical Area Between Two Points Containing No Points */ = {
			isa = PBXGroup;
			children = (
				A18F21BB26A74219009EB007 /* 1637. Widest Vertical Area Between Two Points Containing No Points.h */,
			);
			path = "1637. Widest Vertical Area Between Two Points Containing No Points";
			sourceTree = "<group>";
		};
		A18F21BC26A88928009EB007 /* 1409. Queries on a Permutation With Key */ = {
			isa = PBXGroup;
			children = (
				A18F21BD26A8892F009EB007 /* 1409. Queries on a Permutation With Key.h */,
			);
			path = "1409. Queries on a Permutation With Key";
			sourceTree = "<group>";
		};
		A18F21BE26A88E55009EB007 /* 1329. Sort the Matrix Diagonally */ = {
			isa = PBXGroup;
			children = (
				A18F21BF26A88E5A009EB007 /* 1329. Sort the Matrix Diagonally.h */,
			);
			path = "1329. Sort the Matrix Diagonally";
			sourceTree = "<group>";
		};
		A18F21C026A9D358009EB007 /* 1551. Minimum Operations to Make Array Equal */ = {
			isa = PBXGroup;
			children = (
				A18F21C126A9D35F009EB007 /* 1551. Minimum Operations to Make Array Equal.h */,
			);
			path = "1551. Minimum Operations to Make Array Equal";
			sourceTree = "<group>";
		};
		A18F21C226A9D9B7009EB007 /* 1877. Minimize Maximum Pair Sum in Array */ = {
			isa = PBXGroup;
			children = (
				A18F21C326A9D9BE009EB007 /* 1877. Minimize Maximum Pair Sum in Array.h */,
			);
			path = "1877. Minimize Maximum Pair Sum in Array";
			sourceTree = "<group>";
		};
		A18F21C426A9DBB7009EB007 /* 1817. Finding the Users Active Minutes */ = {
			isa = PBXGroup;
			children = (
				A18F21C526A9DBBB009EB007 /* 1817. Finding the Users Active Minutes.h */,
			);
			path = "1817. Finding the Users Active Minutes";
			sourceTree = "<group>";
		};
		A196AC4123B8FA6900A37EB8 /* 1233. Remove Sub-Folders from the Filesystem */ = {
			isa = PBXGroup;
			children = (
				A196AC4223B8FA7000A37EB8 /* 1233. Remove Sub-Folders from the Filesystem.h */,
			);
			path = "1233. Remove Sub-Folders from the Filesystem";
			sourceTree = "<group>";
		};
		A196AC4323B9077300A37EB8 /* 684. Redundant Connection */ = {
			isa = PBXGroup;
			children = (
				A196AC4423B9077800A37EB8 /* 684. Redundant Connection.h */,
			);
			path = "684. Redundant Connection";
			sourceTree = "<group>";
		};
		A196AC4523BA5C0800A37EB8 /* 565. Array Nesting */ = {
			isa = PBXGroup;
			children = (
				A196AC4623BA5C0E00A37EB8 /* 565. Array Nesting.h */,
			);
			path = "565. Array Nesting";
			sourceTree = "<group>";
		};
		A196AC4723BA60C000A37EB8 /* 648. Replace Words */ = {
			isa = PBXGroup;
			children = (
				A196AC4823BA60C500A37EB8 /* 648. Replace Words.h */,
			);
			path = "648. Replace Words";
			sourceTree = "<group>";
		};
		A196AC4923BBAD9B00A37EB8 /* 1116. Print Zero Even Odd */ = {
			isa = PBXGroup;
			children = (
				A196AC4A23BBADA400A37EB8 /* 1116. Print Zero Even Odd.h */,
			);
			path = "1116. Print Zero Even Odd";
			sourceTree = "<group>";
		};
		A196AC4B23BBB27700A37EB8 /* 1268. Search Suggestions System */ = {
			isa = PBXGroup;
			children = (
				A196AC4C23BBB27C00A37EB8 /* 1268. Search Suggestions System.h */,
			);
			path = "1268. Search Suggestions System";
			sourceTree = "<group>";
		};
		A196AC4D23BE560000A37EB8 /* 1052. Grumpy Bookstore Owner */ = {
			isa = PBXGroup;
			children = (
				A196AC4E23BE560B00A37EB8 /* 1052. Grumpy Bookstore Owner.h */,
			);
			path = "1052. Grumpy Bookstore Owner";
			sourceTree = "<group>";
		};
		A1A7971C23A93A7700A7B758 /* 508. Most Frequent Subtree Sum */ = {
			isa = PBXGroup;
			children = (
				A1A7971D23A93A8600A7B758 /* 508. Most Frequent Subtree Sum.h */,
			);
			path = "508. Most Frequent Subtree Sum";
			sourceTree = "<group>";
		};
		A1A7971E23AA8CD500A7B758 /* 817. Linked List Components */ = {
			isa = PBXGroup;
			children = (
				A1A7971F23AA8CE100A7B758 /* 817. Linked List Components.h */,
			);
			path = "817. Linked List Components";
			sourceTree = "<group>";
		};
		A1A7972023AA939100A7B758 /* 1011. Capacity To Ship Packages Within D Days */ = {
			isa = PBXGroup;
			children = (
				A1A7972123AA939700A7B758 /* 1011. Capacity To Ship Packages Within D Days.h */,
			);
			path = "1011. Capacity To Ship Packages Within D Days";
			sourceTree = "<group>";
		};
		A1A81B122483B17A00C83603 /* 1002. Find Common Characters */ = {
			isa = PBXGroup;
			children = (
				A1A81B132483B18000C83603 /* 1002. Find Common Characters.h */,
			);
			path = "1002. Find Common Characters";
			sourceTree = "<group>";
		};
		A1A81B142483DB3200C83603 /* 1315. Sum of Nodes with Even-Valued Grandparent */ = {
			isa = PBXGroup;
			children = (
				A1A81B152483DB3F00C83603 /* 1315. Sum of Nodes with Even-Valued Grandparent.h */,
			);
			path = "1315. Sum of Nodes with Even-Valued Grandparent";
			sourceTree = "<group>";
		};
		A1A81B162483E07000C83603 /* 1302. Deepest Leaves Sum */ = {
			isa = PBXGroup;
			children = (
				A1A81B172483E07700C83603 /* 1302. Deepest Leaves Sum.h */,
			);
			path = "1302. Deepest Leaves Sum";
			sourceTree = "<group>";
		};
		A1A81B18248551CB00C83603 /* 1290. Convert Binary Number in a Linked List to Integer */ = {
			isa = PBXGroup;
			children = (
				A1A81B19248551D100C83603 /* 1290. Convert Binary Number in a Linked List to Integer.h */,
			);
			path = "1290. Convert Binary Number in a Linked List to Integer";
			sourceTree = "<group>";
		};
		A1A81B1A2485530600C83603 /* 876. Middle of the Linked List */ = {
			isa = PBXGroup;
			children = (
				A1A81B1B2485531500C83603 /* 876. Middle of the Linked List.h */,
			);
			path = "876. Middle of the Linked List";
			sourceTree = "<group>";
		};
		A1A81B1C24856B9E00C83603 /* 1263. Minimum Moves to Move a Box to Their Target Location */ = {
			isa = PBXGroup;
			children = (
				A1A81B1D24856BA700C83603 /* 1263. Minimum Moves to Move a Box to Their Target Location.h */,
			);
			path = "1263. Minimum Moves to Move a Box to Their Target Location";
			sourceTree = "<group>";
		};
		A1A81B1E248805E200C83603 /* 1325. Delete Leaves With a Given Value */ = {
			isa = PBXGroup;
			children = (
				A1A81B1F248805EB00C83603 /* 1325. Delete Leaves With a Given Value.h */,
			);
			path = "1325. Delete Leaves With a Given Value";
			sourceTree = "<group>";
		};
		A1A81B2024880C1D00C83603 /* 1415. The k-th Lexicographical String of All Happy Strings of Length n */ = {
			isa = PBXGroup;
			children = (
				A1A81B2124880C2300C83603 /* 1415. The k-th Lexicographical String of All Happy Strings of Length n.h */,
			);
			path = "1415. The k-th Lexicographical String of All Happy Strings of Length n";
			sourceTree = "<group>";
		};
		A1A81B25248D15E700C83603 /* 445. Add Two Numbers II */ = {
			isa = PBXGroup;
			children = (
				A1A81B26248D15F800C83603 /* 445. Add Two Numbers II.h */,
			);
			path = "445. Add Two Numbers II";
			sourceTree = "<group>";
		};
		A1A8E28B26CEC0AE008233E8 /* 90. Subsets II */ = {
			isa = PBXGroup;
			children = (
				A1A8E28C26CEC344008233E8 /* 90. Subsets II.h */,
			);
			path = "90. Subsets II";
			sourceTree = "<group>";
		};
		A1B3C31F23ABE7C800C0B217 /* 553. Optimal Division */ = {
			isa = PBXGroup;
			children = (
				A1B3C32023ABE7CE00C0B217 /* 553. Optimal Division.h */,
			);
			path = "553. Optimal Division";
			sourceTree = "<group>";
		};
		A1B4B0A526E52E0A00C6D7FB /* 77. Combinations */ = {
			isa = PBXGroup;
			children = (
				A1B4B0A626E52E1800C6D7FB /* 77. Combinations.h */,
			);
			path = "77. Combinations";
			sourceTree = "<group>";
		};
		A1B71FEA2365913000EB34CC /* 1110. Delete Nodes And Return Forest */ = {
			isa = PBXGroup;
			children = (
				A1B71FEB2365913700EB34CC /* 1110. Delete Nodes And Return Forest.h */,
			);
			path = "1110. Delete Nodes And Return Forest";
			sourceTree = "<group>";
		};
		A1C05EA3235C91570077F738 /* 861. Score After Flipping Matrix */ = {
			isa = PBXGroup;
			children = (
				A1C05EA4235C91630077F738 /* 861. Score After Flipping Matrix.h */,
			);
			path = "861. Score After Flipping Matrix";
			sourceTree = "<group>";
		};
		A1C05EA5235CA1D90077F738 /* 1111. Maximum Nesting Depth of Two Valid Parentheses Strings */ = {
			isa = PBXGroup;
			children = (
				A1C05EA6235CA1E10077F738 /* 1111. Maximum Nesting Depth of Two Valid Parentheses Strings.h */,
			);
			path = "1111. Maximum Nesting Depth of Two Valid Parentheses Strings";
			sourceTree = "<group>";
		};
		A1C38D3E248D22D40090D3C3 /* 430. Flatten a Multilevel Doubly Linked List */ = {
			isa = PBXGroup;
			children = (
				A1C38D3F248D22DE0090D3C3 /* 430. Flatten a Multilevel Doubly Linked List.h */,
			);
			path = "430. Flatten a Multilevel Doubly Linked List";
			sourceTree = "<group>";
		};
		A1C38D40248E97B30090D3C3 /* 725. Split Linked List in Parts */ = {
			isa = PBXGroup;
			children = (
				A1C38D41248E97B90090D3C3 /* 725. Split Linked List in Parts.h */,
			);
			path = "725. Split Linked List in Parts";
			sourceTree = "<group>";
		};
		A1C38D42248EAB3C0090D3C3 /* 109. Convert Sorted List to Binary Search Tree */ = {
			isa = PBXGroup;
			children = (
				A1C38D43248EAB430090D3C3 /* 109. Convert Sorted List to Binary Search Tree.h */,
			);
			path = "109. Convert Sorted List to Binary Search Tree";
			sourceTree = "<group>";
		};
		A1C38D4424913ED20090D3C3 /* 142. Linked List Cycle II */ = {
			isa = PBXGroup;
			children = (
				A1C38D4524913ED90090D3C3 /* 142. Linked List Cycle II.h */,
			);
			path = "142. Linked List Cycle II";
			sourceTree = "<group>";
		};
		A1CE719C26A9E51500D78675 /* 3. Longest Substring Without Repeating Characters */ = {
			isa = PBXGroup;
			children = (
				A1CE719D26A9E51A00D78675 /* 3. Longest Substring Without Repeating Characters.h */,
			);
			path = "3. Longest Substring Without Repeating Characters";
			sourceTree = "<group>";
		};
		A1CE719E26AC3BA300D78675 /* 5. Longest Palindromic Substring */ = {
			isa = PBXGroup;
			children = (
				A1CE719F26AC3BA900D78675 /* 5. Longest Palindromic Substring.h */,
			);
			path = "5. Longest Palindromic Substring";
			sourceTree = "<group>";
		};
		A1CE71A026AC8E1500D78675 /* 1605. Find Valid Matrix Given Row and Column Sums */ = {
			isa = PBXGroup;
			children = (
				A1CE71A126AC8E1B00D78675 /* 1605. Find Valid Matrix Given Row and Column Sums.h */,
			);
			path = "1605. Find Valid Matrix Given Row and Column Sums";
			sourceTree = "<group>";
		};
		A1CE71A226AD430700D78675 /* 1305. All Elements in Two Binary Search Trees */ = {
			isa = PBXGroup;
			children = (
				A1CE71A326AD431100D78675 /* 1305. All Elements in Two Binary Search Trees.h */,
			);
			path = "1305. All Elements in Two Binary Search Trees";
			sourceTree = "<group>";
		};
		A1CE71A426AD483200D78675 /* 1630. Arithmetic Subarrays */ = {
			isa = PBXGroup;
			children = (
				A1CE71A526AD483700D78675 /* 1630. Arithmetic Subarrays.h */,
			);
			path = "1630. Arithmetic Subarrays";
			sourceTree = "<group>";
		};
		A1CE71A626AF2C1C00D78675 /* 146. LRU Cache */ = {
			isa = PBXGroup;
			children = (
				A1CE71A726AF2C2600D78675 /* 146. LRU Cache.h */,
			);
			path = "146. LRU Cache";
			sourceTree = "<group>";
		};
		A1CE71A826B1AE9700D78675 /* 33. Search in Rotated Sorted Array */ = {
			isa = PBXGroup;
			children = (
				A1CE71A926B1AE9D00D78675 /* 33. Search in Rotated Sorted Array.h */,
			);
			path = "33. Search in Rotated Sorted Array";
			sourceTree = "<group>";
		};
		A1CE71AA26B1D7DC00D78675 /* 25. Reverse Nodes in k-Group */ = {
			isa = PBXGroup;
			children = (
				A1CE71AB26B1D7E200D78675 /* 25. Reverse Nodes in k-Group.h */,
			);
			path = "25. Reverse Nodes in k-Group";
			sourceTree = "<group>";
		};
		A1CE71AC26B3176F00D78675 /* 15. 3Sum */ = {
			isa = PBXGroup;
			children = (
				A1CE71AD26B3177900D78675 /* 15. 3Sum.h */,
			);
			path = "15. 3Sum";
			sourceTree = "<group>";
		};
		A1CE71AE26B685D000D78675 /* 121. Best Time to Buy and Sell Stock */ = {
			isa = PBXGroup;
			children = (
				A1CE71AF26B685D600D78675 /* 121. Best Time to Buy and Sell Stock.h */,
			);
			path = "121. Best Time to Buy and Sell Stock";
			sourceTree = "<group>";
		};
		A1CE71B026B689AF00D78675 /* 42. Trapping Rain Water */ = {
			isa = PBXGroup;
			children = (
				A1CE71B126B689BD00D78675 /* 42. Trapping Rain Water.h */,
			);
			path = "42. Trapping Rain Water";
			sourceTree = "<group>";
		};
		A1CE71B226B6961300D78675 /* 53. Maximum Subarray */ = {
			isa = PBXGroup;
			children = (
				A1CE71B326B6961A00D78675 /* 53. Maximum Subarray.h */,
			);
			path = "53. Maximum Subarray";
			sourceTree = "<group>";
		};
		A1CE71B426B697FC00D78675 /* 54. Spiral Matrix */ = {
			isa = PBXGroup;
			children = (
				A1CE71B526B6980100D78675 /* 54. Spiral Matrix.h */,
			);
			path = "54. Spiral Matrix";
			sourceTree = "<group>";
		};
		A1CE71B626B69F3400D78675 /* 200. Number of Islands */ = {
			isa = PBXGroup;
			children = (
				A1CE71B726B69F3A00D78675 /* 200. Number of Islands.h */,
			);
			path = "200. Number of Islands";
			sourceTree = "<group>";
		};
		A1CE71B826B7092B00D78675 /* 199. Binary Tree Right Side View */ = {
			isa = PBXGroup;
			children = (
				A1CE71B926B7093100D78675 /* 199. Binary Tree Right Side View.h */,
			);
			path = "199. Binary Tree Right Side View";
			sourceTree = "<group>";
		};
		A1DD0DA124A9025500588495 /* 96. Unique Binary Search Trees */ = {
			isa = PBXGroup;
			children = (
				A1DD0DA224A9025F00588495 /* 96. Unique Binary Search Trees.h */,
			);
			path = "96. Unique Binary Search Trees";
			sourceTree = "<group>";
		};
		A1DD0DA324AA460300588495 /* 61. Rotate List */ = {
			isa = PBXGroup;
			children = (
				A1DD0DA424AA460A00588495 /* 61. Rotate List.h */,
			);
			path = "61. Rotate List";
			sourceTree = "<group>";
		};
		A1DD0DA524ACF23300588495 /* 103. Binary Tree Zigzag Level Order Traversal */ = {
			isa = PBXGroup;
			children = (
				A1DD0DA624ACF23C00588495 /* 103. Binary Tree Zigzag Level Order Traversal.h */,
			);
			path = "103. Binary Tree Zigzag Level Order Traversal";
			sourceTree = "<group>";
		};
		A1DD0DA724AE3DCC00588495 /* 105. Construct Binary Tree from Preorder and Inorder Traversal */ = {
			isa = PBXGroup;
			children = (
				A1DD0DA824AE3E6E00588495 /* 105. Construct Binary Tree from Preorder and Inorder Traversal.h */,
			);
			path = "105. Construct Binary Tree from Preorder and Inorder Traversal";
			sourceTree = "<group>";
		};
		A1DD0DA924AF8E2600588495 /* 98. Validate Binary Search Tree */ = {
			isa = PBXGroup;
			children = (
				A1DD0DAA24AF8E3800588495 /* 98. Validate Binary Search Tree.h */,
			);
			path = "98. Validate Binary Search Tree";
			sourceTree = "<group>";
		};
		A1DD0DAB24AF94C400588495 /* 99. Recover Binary Search Tree */ = {
			isa = PBXGroup;
			children = (
				A1DD0DAC24AF94C900588495 /* 99. Recover Binary Search Tree.h */,
			);
			path = "99. Recover Binary Search Tree";
			sourceTree = "<group>";
		};
		A1DD7194234CEC50003E8052 /* 69. Sqrt(x) */ = {
			isa = PBXGroup;
			children = (
				A1DD7195234CEC5B003E8052 /* 69. Sqrt(x).h */,
			);
			path = "69. Sqrt(x)";
			sourceTree = "<group>";
		};
		A1DD7196234CF613003E8052 /* 633. Sum of Square Numbers */ = {
			isa = PBXGroup;
			children = (
				A1DD7197234CF61E003E8052 /* 633. Sum of Square Numbers.h */,
			);
			path = "633. Sum of Square Numbers";
			sourceTree = "<group>";
		};
		A1DD7198234CFBEA003E8052 /* 874. Walking Robot Simulation */ = {
			isa = PBXGroup;
			children = (
				A1DD7199234CFBF2003E8052 /* 874. Walking Robot Simulation.h */,
			);
			path = "874. Walking Robot Simulation";
			sourceTree = "<group>";
		};
		A1DD71BA234F9778003E8052 /* 807. Max Increase to Keep City Skyline */ = {
			isa = PBXGroup;
			children = (
				A1DD71BB234F9780003E8052 /* 807. Max Increase to Keep City Skyline.h */,
			);
			path = "807. Max Increase to Keep City Skyline";
			sourceTree = "<group>";
		};
		A1DD71BC2350E8BA003E8052 /* 1038. Binary Search Tree to Greater Sum Tree */ = {
			isa = PBXGroup;
			children = (
				A1DD71BD2350E8CA003E8052 /* 1038. Binary Search Tree to Greater Sum Tree.h */,
			);
			path = "1038. Binary Search Tree to Greater Sum Tree";
			sourceTree = "<group>";
		};
		A1DD71BE23523B6B003E8052 /* 535. Encode and Decode TinyURL */ = {
			isa = PBXGroup;
			children = (
				A1DD71BF23523B75003E8052 /* 535. Encode and Decode TinyURL.h */,
			);
			path = "535. Encode and Decode TinyURL";
			sourceTree = "<group>";
		};
		A1DD71C023524787003E8052 /* 701. Insert into a Binary Search Tree */ = {
			isa = PBXGroup;
			children = (
				A1DD71C12352478F003E8052 /* 701. Insert into a Binary Search Tree.h */,
				A1DD71C223524823003E8052 /* 701. Insert into a Binary Search Tree.txt */,
			);
			path = "701. Insert into a Binary Search Tree";
			sourceTree = "<group>";
		};
		A1DD71C323524B61003E8052 /* 654. Maximum Binary Tree */ = {
			isa = PBXGroup;
			children = (
				A1DD71C423524B6F003E8052 /* 654. Maximum Binary Tree.h */,
				A1DD71C52352F745003E8052 /* 654. Maximum Binary Tree.txt */,
			);
			path = "654. Maximum Binary Tree";
			sourceTree = "<group>";
		};
		A1DD71C6235381C6003E8052 /* 1079. Letter Tile Possibilities */ = {
			isa = PBXGroup;
			children = (
				A1DD71C7235381D1003E8052 /* 1079. Letter Tile Possibilities.h */,
				A1DD71C823538C5F003E8052 /* 1079. Letter Tile Possibilities.txt */,
			);
			path = "1079. Letter Tile Possibilities";
			sourceTree = "<group>";
		};
		A1DD71C92354DA52003E8052 /* 1008. Construct Binary Search Tree from Preorder Traversal */ = {
			isa = PBXGroup;
			children = (
				A1DD71CA2354DA5E003E8052 /* 1008. Construct Binary Search Tree from Preorder Traversal.h */,
			);
			path = "1008. Construct Binary Search Tree from Preorder Traversal";
			sourceTree = "<group>";
		};
		A1DD71CB23561D9A003E8052 /* 950. Reveal Cards In Increasing Order */ = {
			isa = PBXGroup;
			children = (
				A1DD71CC23561DA4003E8052 /* 950. Reveal Cards In Increasing Order.h */,
			);
			path = "950. Reveal Cards In Increasing Order";
			sourceTree = "<group>";
		};
		A1DD71CD23562D67003E8052 /* 763. Partition Labels */ = {
			isa = PBXGroup;
			children = (
				A1DD71CE23562D6E003E8052 /* 763. Partition Labels.h */,
			);
			path = "763. Partition Labels";
			sourceTree = "<group>";
		};
		A1DD71CF23577810003E8052 /* 814. Binary Tree Pruning */ = {
			isa = PBXGroup;
			children = (
				A1DD71D02357781B003E8052 /* 814. Binary Tree Pruning.h */,
			);
			path = "814. Binary Tree Pruning";
			sourceTree = "<group>";
		};
		A1DD71D123577CBD003E8052 /* 797. All Paths From Source to Target */ = {
			isa = PBXGroup;
			children = (
				A1DD71D223577CC5003E8052 /* 797. All Paths From Source to Target.h */,
			);
			path = "797. All Paths From Source to Target";
			sourceTree = "<group>";
		};
		A1DD71D32358C594003E8052 /* 890. Find and Replace Pattern */ = {
			isa = PBXGroup;
			children = (
				A1DD71D42358C59C003E8052 /* 890. Find and Replace Pattern.h */,
			);
			path = "890. Find and Replace Pattern";
			sourceTree = "<group>";
		};
		A1DD71D52358CD81003E8052 /* 894. All Possible Full Binary Trees */ = {
			isa = PBXGroup;
			children = (
				A1DD71D62358CD89003E8052 /* 894. All Possible Full Binary Trees.h */,
			);
			path = "894. All Possible Full Binary Trees";
			sourceTree = "<group>";
		};
		A1DF72142497CB570078909E /* 617. Merge Two Binary Trees */ = {
			isa = PBXGroup;
			children = (
				A1DF72152497CB600078909E /* 617. Merge Two Binary Trees.h */,
			);
			path = "617. Merge Two Binary Trees";
			sourceTree = "<group>";
		};
		A1EA24902369F17A009BAE43 /* 959. Regions Cut By Slashes */ = {
			isa = PBXGroup;
			children = (
				A1EA24912369F182009BAE43 /* 959. Regions Cut By Slashes.h */,
			);
			path = "959. Regions Cut By Slashes";
			sourceTree = "<group>";
		};
		A1EA2492236B43A3009BAE43 /* 791. Custom Sort String */ = {
			isa = PBXGroup;
			children = (
				A1EA2493236B43AE009BAE43 /* 791. Custom Sort String.h */,
			);
			path = "791. Custom Sort String";
			sourceTree = "<group>";
		};
		A1EA2494236C9DBE009BAE43 /* 912. Sort an Array  */ = {
			isa = PBXGroup;
			children = (
				A1EA2495236C9DC6009BAE43 /* 912. Sort an Array .h */,
			);
			path = "912. Sort an Array ";
			sourceTree = "<group>";
		};
		A1EA2496236C9DF2009BAE43 /* 1043. Partition Array for Maximum Sum */ = {
			isa = PBXGroup;
			children = (
				A1EA2497236C9DFA009BAE43 /* 1043. Partition Array for Maximum Sum.h */,
			);
			path = "1043. Partition Array for Maximum Sum";
			sourceTree = "<group>";
		};
		A1EA2498236DEEEB009BAE43 /* 969. Pancake Sorting */ = {
			isa = PBXGroup;
			children = (
				A1EA2499236DEEF2009BAE43 /* 969. Pancake Sorting.h */,
			);
			path = "969. Pancake Sorting";
			sourceTree = "<group>";
		};
		A1EA249A236DF902009BAE43 /* 889. Construct Binary Tree from Preorder and Postorder Traversal */ = {
			isa = PBXGroup;
			children = (
				A1EA249B236DF909009BAE43 /* 889. Construct Binary Tree from Preorder and Postorder Traversal.h */,
			);
			path = "889. Construct Binary Tree from Preorder and Postorder Traversal";
			sourceTree = "<group>";
		};
		A1EA249C236EB264009BAE43 /* 1130. Minimum Cost Tree From Leaf Values */ = {
			isa = PBXGroup;
			children = (
				A1EA249D236EB26A009BAE43 /* 1130. Minimum Cost Tree From Leaf Values.h */,
			);
			path = "1130. Minimum Cost Tree From Leaf Values";
			sourceTree = "<group>";
		};
		A1EA249E236EB29A009BAE43 /* 1026. Maximum Difference Between Node and Ancestor */ = {
			isa = PBXGroup;
			children = (
				A1EA249F236EB2A6009BAE43 /* 1026. Maximum Difference Between Node and Ancestor.h */,
			);
			path = "1026. Maximum Difference Between Node and Ancestor";
			sourceTree = "<group>";
		};
		A1FFD64526D8D3C80006B1DF /* 59. Spiral Matrix II */ = {
			isa = PBXGroup;
			children = (
				A1FFD64626D8D3CC0006B1DF /* 59. Spiral Matrix II.h */,
			);
			path = "59. Spiral Matrix II";
			sourceTree = "<group>";
		};
		A1FFD64726D8D6920006B1DF /* 64. Minimum Path Sum */ = {
			isa = PBXGroup;
			children = (
				A1FFD64826D8D6970006B1DF /* 64. Minimum Path Sum.h */,
			);
			path = "64. Minimum Path Sum";
			sourceTree = "<group>";
		};
		A1FFD64926D8D8DE0006B1DF /* 73. Set Matrix Zeroes */ = {
			isa = PBXGroup;
			children = (
				A1FFD64A26D8D8E30006B1DF /* 73. Set Matrix Zeroes.h */,
			);
			path = "73. Set Matrix Zeroes";
			sourceTree = "<group>";
		};
		A1FFD64B26D8E1480006B1DF /* 75. Sort Colors */ = {
			isa = PBXGroup;
			children = (
				A1FFD64C26D8E14D0006B1DF /* 75. Sort Colors.h */,
			);
			path = "75. Sort Colors";
			sourceTree = "<group>";
		};
		A1FFD64D26DA19E40006B1DF /* 82. Remove Duplicates from Sorted List II */ = {
			isa = PBXGroup;
			children = (
				A1FFD64E26DA19E80006B1DF /* 82. Remove Duplicates from Sorted List II.h */,
			);
			path = "82. Remove Duplicates from Sorted List II";
			sourceTree = "<group>";
		};
		A1FFD64F26DA1D090006B1DF /* 80. Remove Duplicates from Sorted Array II */ = {
			isa = PBXGroup;
			children = (
				A1FFD65026DA1D130006B1DF /* 80. Remove Duplicates from Sorted Array II.h */,
			);
			path = "80. Remove Duplicates from Sorted Array II";
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		A169986D22FEBF6200F640E5 /* leetcode */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = A169987522FEBF6200F640E5 /* Build configuration list for PBXNativeTarget "leetcode" */;
			buildPhases = (
				A169986A22FEBF6200F640E5 /* Sources */,
				A169986B22FEBF6200F640E5 /* Frameworks */,
				A169986C22FEBF6200F640E5 /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = leetcode;
			productName = leetcode;
			productReference = A169986E22FEBF6200F640E5 /* leetcode */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		A169986622FEBF6200F640E5 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1030;
				ORGANIZATIONNAME = Andy;
				TargetAttributes = {
					A169986D22FEBF6200F640E5 = {
						CreatedOnToolsVersion = 10.3;
					};
				};
			};
			buildConfigurationList = A169986922FEBF6200F640E5 /* Build configuration list for PBXProject "leetcode" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = A169986522FEBF6200F640E5;
			productRefGroup = A169986F22FEBF6200F640E5 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				A169986D22FEBF6200F640E5 /* leetcode */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		A169986A22FEBF6200F640E5 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				A169987222FEBF6200F640E5 /* main.cpp in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		A169987322FEBF6200F640E5 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				CODE_SIGN_IDENTITY = "Mac Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
			};
			name = Debug;
		};
		A169987422FEBF6200F640E5 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				CODE_SIGN_IDENTITY = "Mac Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
			};
			name = Release;
		};
		A169987622FEBF6200F640E5 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = 9E9C2ZNYDA;
				PRODUCT_BUNDLE_IDENTIFIER = cn.andysheng.leetcode;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		A169987722FEBF6200F640E5 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = 6JV8VTV77T;
				PRODUCT_BUNDLE_IDENTIFIER = cn.andysheng.leetcode;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		A169986922FEBF6200F640E5 /* Build configuration list for PBXProject "leetcode" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				A169987322FEBF6200F640E5 /* Debug */,
				A169987422FEBF6200F640E5 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		A169987522FEBF6200F640E5 /* Build configuration list for PBXNativeTarget "leetcode" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				A169987622FEBF6200F640E5 /* Debug */,
				A169987722FEBF6200F640E5 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = A169986622FEBF6200F640E5 /* Project object */;
}
