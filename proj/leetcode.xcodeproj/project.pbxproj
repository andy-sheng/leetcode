// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 50;
	objects = {

/* Begin PBXBuildFile section */
		A169987222FEBF6200F640E5 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A169987122FEBF6200F640E5 /* main.cpp */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		A169986C22FEBF6200F640E5 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		A12C8ADD234124DC000036C8 /* DataStructures.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = DataStructures.h; sourceTree = "<group>"; };
		A169986E22FEBF6200F640E5 /* leetcode */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = leetcode; sourceTree = BUILT_PRODUCTS_DIR; };
		A169987122FEBF6200F640E5 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
		A1E30000276DEBC100AC595D /* 31. Next Permutation.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "31. Next Permutation.h"; sourceTree = "<group>"; };
		A1E30002276DEBC100AC595D /* 1302. Deepest Leaves Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1302. Deepest Leaves Sum.h"; sourceTree = "<group>"; };
		A1E30004276DEBC100AC595D /* 532. K-diff Pairs in an Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "532. K-diff Pairs in an Array.h"; sourceTree = "<group>"; };
		A1E30006276DEBC100AC595D /* 146. LRU Cache.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "146. LRU Cache.h"; sourceTree = "<group>"; };
		A1E30008276DEBC100AC595D /* 932. Beautiful Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "932. Beautiful Array.h"; sourceTree = "<group>"; };
		A1E3000A276DEBC100AC595D /* 1016. Binary String With Substrings Representing 1 To N.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1016. Binary String With Substrings Representing 1 To N.h"; sourceTree = "<group>"; };
		A1E3000C276DEBC100AC595D /* 654. Maximum Binary Tree.txt */ = {isa = PBXFileReference; lastKnownFileType = text; path = "654. Maximum Binary Tree.txt"; sourceTree = "<group>"; };
		A1E3000D276DEBC100AC595D /* 654. Maximum Binary Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "654. Maximum Binary Tree.h"; sourceTree = "<group>"; };
		A1E3000F276DEBC100AC595D /* 92. Reverse Linked List II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "92. Reverse Linked List II.h"; sourceTree = "<group>"; };
		A1E30011276DEBC100AC595D /* 1115. Print FooBar Alternately.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1115. Print FooBar Alternately.h"; sourceTree = "<group>"; };
		A1E30013276DEBC100AC595D /* 90. Subsets II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "90. Subsets II.h"; sourceTree = "<group>"; };
		A1E30015276DEBC100AC595D /* 61. Rotate List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "61. Rotate List.h"; sourceTree = "<group>"; };
		A1E30017276DEBC100AC595D /* 1025. Divisor Game.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1025. Divisor Game.h"; sourceTree = "<group>"; };
		A1E30018276DEBC100AC595D /* README.md */ = {isa = PBXFileReference; lastKnownFileType = net.daringfireball.markdown; path = README.md; sourceTree = "<group>"; };
		A1E3001A276DEBC100AC595D /* 86. Partition List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "86. Partition List.h"; sourceTree = "<group>"; };
		A1E3001C276DEBC100AC595D /* 526. Beautiful Arrangement.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "526. Beautiful Arrangement.h"; sourceTree = "<group>"; };
		A1E3001E276DEBC100AC595D /* 1305. All Elements in Two Binary Search Trees.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1305. All Elements in Two Binary Search Trees.h"; sourceTree = "<group>"; };
		A1E30020276DEBC100AC595D /* 856. Score of Parentheses.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "856. Score of Parentheses.h"; sourceTree = "<group>"; };
		A1E30022276DEBC100AC595D /* 54. Spiral Matrix.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "54. Spiral Matrix.h"; sourceTree = "<group>"; };
		A1E30024276DEBC100AC595D /* 540. Single Element in a Sorted Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "540. Single Element in a Sorted Array.h"; sourceTree = "<group>"; };
		A1E30026276DEBC100AC595D /* 633. Sum of Square Numbers.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "633. Sum of Square Numbers.h"; sourceTree = "<group>"; };
		A1E30028276DEBC100AC595D /* 1052. Grumpy Bookstore Owner.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1052. Grumpy Bookstore Owner.h"; sourceTree = "<group>"; };
		A1E3002A276DEBC200AC595D /* 73. Set Matrix Zeroes.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "73. Set Matrix Zeroes.h"; sourceTree = "<group>"; };
		A1E3002C276DEBC200AC595D /* 817. Linked List Components.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "817. Linked List Components.h"; sourceTree = "<group>"; };
		A1E3002E276DEBC200AC595D /* 79. Word Search.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "79. Word Search.h"; sourceTree = "<group>"; };
		A1E30030276DEBC200AC595D /* 1020. Number of Enclaves.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1020. Number of Enclaves.h"; sourceTree = "<group>"; };
		A1E30032276DEBC200AC595D /* 1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree.h"; sourceTree = "<group>"; };
		A1E30034276DEBC200AC595D /* 199. Binary Tree Right Side View.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "199. Binary Tree Right Side View.h"; sourceTree = "<group>"; };
		A1E30036276DEBC200AC595D /* 889. Construct Binary Tree from Preorder and Postorder Traversal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "889. Construct Binary Tree from Preorder and Postorder Traversal.h"; sourceTree = "<group>"; };
		A1E30038276DEBC200AC595D /* 1143. Longest Common Subsequence.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1143. Longest Common Subsequence.h"; sourceTree = "<group>"; };
		A1E3003A276DEBC200AC595D /* 1017. Convert to Base -2 .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1017. Convert to Base -2 .h"; sourceTree = "<group>"; };
		A1E3003C276DEBC200AC595D /* 1315. Sum of Nodes with Even-Valued Grandparent.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1315. Sum of Nodes with Even-Valued Grandparent.h"; sourceTree = "<group>"; };
		A1E3003E276DEBC200AC595D /* 1023. Camelcase Matching.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1023. Camelcase Matching.h"; sourceTree = "<group>"; };
		A1E30040276DEBC200AC595D /* 791. Custom Sort String.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "791. Custom Sort String.h"; sourceTree = "<group>"; };
		A1E30042276DEBC200AC595D /* 1415. The k-th Lexicographical String of All Happy Strings of Length n.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1415. The k-th Lexicographical String of All Happy Strings of Length n.h"; sourceTree = "<group>"; };
		A1E30044276DEBC200AC595D /* 763. Partition Labels.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "763. Partition Labels.h"; sourceTree = "<group>"; };
		A1E30046276DEBC200AC595D /* 859. Buddy Strings.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "859. Buddy Strings.h"; sourceTree = "<group>"; };
		A1E30048276DEBC200AC595D /* 1254. Number of Closed Islands.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1254. Number of Closed Islands.h"; sourceTree = "<group>"; };
		A1E3004A276DEBC200AC595D /* 1605. Find Valid Matrix Given Row and Column Sums.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1605. Find Valid Matrix Given Row and Column Sums.h"; sourceTree = "<group>"; };
		A1E3004C276DEBC200AC595D /* 1476. Subrectangle Queries.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1476. Subrectangle Queries.h"; sourceTree = "<group>"; };
		A1E3004E276DEBC200AC595D /* 814. Binary Tree Pruning.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "814. Binary Tree Pruning.h"; sourceTree = "<group>"; };
		A1E30050276DEBC200AC595D /* 515. Find Largest Value in Each Tree Row.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "515. Find Largest Value in Each Tree Row.h"; sourceTree = "<group>"; };
		A1E30052276DEBC200AC595D /* 1209. Remove All Adjacent Duplicates in String II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1209. Remove All Adjacent Duplicates in String II.h"; sourceTree = "<group>"; };
		A1E30054276DEBC200AC595D /* 103. Binary Tree Zigzag Level Order Traversal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "103. Binary Tree Zigzag Level Order Traversal.h"; sourceTree = "<group>"; };
		A1E30056276DEBC200AC595D /* 16. 3Sum Closest.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "16. 3Sum Closest.h"; sourceTree = "<group>"; };
		A1E30058276DEBC300AC595D /* 45. Jump Game II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "45. Jump Game II.h"; sourceTree = "<group>"; };
		A1E3005A276DEBC300AC595D /* 85. Maximal Rectangle.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "85. Maximal Rectangle.h"; sourceTree = "<group>"; };
		A1E3005C276DEBC300AC595D /* 1227. Airplane Seat Assignment Probability.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1227. Airplane Seat Assignment Probability.h"; sourceTree = "<group>"; };
		A1E3005E276DEBC300AC595D /* 986. Interval List Intersections.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "986. Interval List Intersections.h"; sourceTree = "<group>"; };
		A1E30060276DEBC300AC595D /* 1105. Filling Bookcase Shelves.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1105. Filling Bookcase Shelves.h"; sourceTree = "<group>"; };
		A1E30062276DEBC300AC595D /* 1329. Sort the Matrix Diagonally.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1329. Sort the Matrix Diagonally.h"; sourceTree = "<group>"; };
		A1E30064276DEBC300AC595D /* 74. Search a 2D Matrix.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "74. Search a 2D Matrix.h"; sourceTree = "<group>"; };
		A1E30066276DEBC300AC595D /* 50. Pow(x, n).h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "50. Pow(x, n).h"; sourceTree = "<group>"; };
		A1E30068276DEBC300AC595D /* 605. Can Place Flowers.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "605. Can Place Flowers.h"; sourceTree = "<group>"; };
		A1E3006A276DEBC300AC595D /* 99. Recover Binary Search Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "99. Recover Binary Search Tree.h"; sourceTree = "<group>"; };
		A1E3006C276DEBC300AC595D /* 1190. Reverse Substrings Between Each Pair of Parentheses.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1190. Reverse Substrings Between Each Pair of Parentheses.h"; sourceTree = "<group>"; };
		A1E3006E276DEBC300AC595D /* 39. Combination Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "39. Combination Sum.h"; sourceTree = "<group>"; };
		A1E30070276DEBC300AC595D /* 105. Construct Binary Tree from Preorder and Inorder Traversal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "105. Construct Binary Tree from Preorder and Inorder Traversal.h"; sourceTree = "<group>"; };
		A1E30072276DEBC300AC595D /* 1249. Minimum Remove to Make Valid Parentheses.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1249. Minimum Remove to Make Valid Parentheses.h"; sourceTree = "<group>"; };
		A1E30074276DEBC300AC595D /* 33. Search in Rotated Sorted Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "33. Search in Rotated Sorted Array.h"; sourceTree = "<group>"; };
		A1E30076276DEBC300AC595D /* 547. Friend Circles.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "547. Friend Circles.h"; sourceTree = "<group>"; };
		A1E30078276DEBC300AC595D /* 1267. Count Servers that Communicate.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1267. Count Servers that Communicate.h"; sourceTree = "<group>"; };
		A1E3007A276DEBC300AC595D /* 47. Permutations II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "47. Permutations II.h"; sourceTree = "<group>"; };
		A1E3007C276DEBC300AC595D /* 686. Repeated String Match.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "686. Repeated String Match.h"; sourceTree = "<group>"; };
		A1E3007E276DEBC300AC595D /* 1004. Max Consecutive Ones III.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1004. Max Consecutive Ones III.h"; sourceTree = "<group>"; };
		A1E30080276DEBC300AC595D /* 429. N-ary Tree Level Order Traversal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "429. N-ary Tree Level Order Traversal.h"; sourceTree = "<group>"; };
		A1E30082276DEBC400AC595D /* 71. Simplify Path.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "71. Simplify Path.h"; sourceTree = "<group>"; };
		A1E30084276DEBC400AC595D /* 647. Palindromic Substrings .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "647. Palindromic Substrings .h"; sourceTree = "<group>"; };
		A1E30086276DEBC400AC595D /* 535. Encode and Decode TinyURL.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "535. Encode and Decode TinyURL.h"; sourceTree = "<group>"; };
		A1E30088276DEBC400AC595D /* 919. Complete Binary Tree Inserter.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "919. Complete Binary Tree Inserter.h"; sourceTree = "<group>"; };
		A1E3008A276DEBC400AC595D /* 648. Replace Words.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "648. Replace Words.h"; sourceTree = "<group>"; };
		A1E3008C276DEBC400AC595D /* 739. Daily Temperatures .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "739. Daily Temperatures .h"; sourceTree = "<group>"; };
		A1E3008E276DEBC400AC595D /* 1116. Print Zero Even Odd.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1116. Print Zero Even Odd.h"; sourceTree = "<group>"; };
		A1E30090276DEBC400AC595D /* 581. Shortest Unsorted Continuous Subarray.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "581. Shortest Unsorted Continuous Subarray.h"; sourceTree = "<group>"; };
		A1E30092276DEBC400AC595D /* 695. Max Area of Island.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "695. Max Area of Island.h"; sourceTree = "<group>"; };
		A1E30094276DEBC400AC595D /* 69. Sqrt(x).h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "69. Sqrt(x).h"; sourceTree = "<group>"; };
		A1E30096276DEBC400AC595D /* 861. Score After Flipping Matrix.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "861. Score After Flipping Matrix.h"; sourceTree = "<group>"; };
		A1E30098276DEBC400AC595D /* 973. K Closest Points to Origin.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "973. K Closest Points to Origin.h"; sourceTree = "<group>"; };
		A1E3009A276DEBC400AC595D /* 938. Range Sum of BST.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "938. Range Sum of BST.h"; sourceTree = "<group>"; };
		A1E3009C276DEBC400AC595D /* 59. Spiral Matrix II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "59. Spiral Matrix II.h"; sourceTree = "<group>"; };
		A1E3009E276DEBC400AC595D /* 565. Array Nesting.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "565. Array Nesting.h"; sourceTree = "<group>"; };
		A1E300A0276DEBC400AC595D /* 665. Non-decreasing Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "665. Non-decreasing Array.h"; sourceTree = "<group>"; };
		A1E300A2276DEBC400AC595D /* 1409. Queries on a Permutation With Key.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1409. Queries on a Permutation With Key.h"; sourceTree = "<group>"; };
		A1E300A4276DEBC400AC595D /* 236. Lowest Common Ancestor of a Binary Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "236. Lowest Common Ancestor of a Binary Tree.h"; sourceTree = "<group>"; };
		A1E300A6276DEBC400AC595D /* 430. Flatten a Multilevel Doubly Linked List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "430. Flatten a Multilevel Doubly Linked List.h"; sourceTree = "<group>"; };
		A1E300A8276DEBC400AC595D /* 1551. Minimum Operations to Make Array Equal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1551. Minimum Operations to Make Array Equal.h"; sourceTree = "<group>"; };
		A1E300AA276DEBC500AC595D /* 959. Regions Cut By Slashes.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "959. Regions Cut By Slashes.h"; sourceTree = "<group>"; };
		A1E300AC276DEBC500AC595D /* 1238. Circular Permutation in Binary Representation.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1238. Circular Permutation in Binary Representation.h"; sourceTree = "<group>"; };
		A1E300AE276DEBC500AC595D /* 2. Add Two Numbers.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "2. Add Two Numbers.h"; sourceTree = "<group>"; };
		A1E300B0276DEBC500AC595D /* 49. Group Anagrams.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "49. Group Anagrams.h"; sourceTree = "<group>"; };
		A1E300B2276E00B700AC595D /* 106. Construct Binary Tree from Inorder and Postorder Traversal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "106. Construct Binary Tree from Inorder and Postorder Traversal.h"; sourceTree = "<group>"; };
		A1E3FF18276DEBBB00AC595D /* 950. Reveal Cards In Increasing Order.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "950. Reveal Cards In Increasing Order.h"; sourceTree = "<group>"; };
		A1E3FF1A276DEBBB00AC595D /* 947. Most Stones Removed with Same Row or Column.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "947. Most Stones Removed with Same Row or Column.h"; sourceTree = "<group>"; };
		A1E3FF1C276DEBBB00AC595D /* 1140. Stone Game II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1140. Stone Game II.h"; sourceTree = "<group>"; };
		A1E3FF1E276DEBBB00AC595D /* 1108. Defanging an IP Address.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1108. Defanging an IP Address.h"; sourceTree = "<group>"; };
		A1E3FF20276DEBBB00AC595D /* 921. Minimum Add to Make Parentheses Valid.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "921. Minimum Add to Make Parentheses Valid.h"; sourceTree = "<group>"; };
		A1E3FF22276DEBBB00AC595D /* 64. Minimum Path Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "64. Minimum Path Sum.h"; sourceTree = "<group>"; };
		A1E3FF24276DEBBB00AC595D /* 29. Divide Two Integers.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "29. Divide Two Integers.h"; sourceTree = "<group>"; };
		A1E3FF26276DEBBB00AC595D /* 1219. Path with Maximum Gold.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1219. Path with Maximum Gold.h"; sourceTree = "<group>"; };
		A1E3FF28276DEBBC00AC595D /* 3. Longest Substring Without Repeating Characters.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "3. Longest Substring Without Repeating Characters.h"; sourceTree = "<group>"; };
		A1E3FF2A276DEBBC00AC595D /* 93. Restore IP Addresses.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "93. Restore IP Addresses.h"; sourceTree = "<group>"; };
		A1E3FF2C276DEBBC00AC595D /* 537. Complex Number Multiplication.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "537. Complex Number Multiplication.h"; sourceTree = "<group>"; };
		A1E3FF2E276DEBBC00AC595D /* 1002. Find Common Characters.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1002. Find Common Characters.h"; sourceTree = "<group>"; };
		A1E3FF30276DEBBC00AC595D /* 121. Best Time to Buy and Sell Stock.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "121. Best Time to Buy and Sell Stock.h"; sourceTree = "<group>"; };
		A1E3FF32276DEBBC00AC595D /* 789. Escape The Ghosts.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "789. Escape The Ghosts.h"; sourceTree = "<group>"; };
		A1E3FF34276DEBBC00AC595D /* 1769. Minimum Number of Operations to Move All Balls to Each Box.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1769. Minimum Number of Operations to Move All Balls to Each Box.h"; sourceTree = "<group>"; };
		A1E3FF36276DEBBC00AC595D /* 443. String Compression.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "443. String Compression.h"; sourceTree = "<group>"; };
		A1E3FF38276DEBBC00AC595D /* 931. Minimum Falling Path Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "931. Minimum Falling Path Sum.h"; sourceTree = "<group>"; };
		A1E3FF3A276DEBBC00AC595D /* 1817. Finding the Users Active Minutes.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1817. Finding the Users Active Minutes.h"; sourceTree = "<group>"; };
		A1E3FF3C276DEBBC00AC595D /* 1689. Partitioning Into Minimum Number Of Deci-Binary Numbers.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1689. Partitioning Into Minimum Number Of Deci-Binary Numbers.h"; sourceTree = "<group>"; };
		A1E3FF3E276DEBBC00AC595D /* 80. Remove Duplicates from Sorted Array II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "80. Remove Duplicates from Sorted Array II.h"; sourceTree = "<group>"; };
		A1E3FF40276DEBBC00AC595D /* 876. Middle of the Linked List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "876. Middle of the Linked List.h"; sourceTree = "<group>"; };
		A1E3FF42276DEBBC00AC595D /* 1026. Maximum Difference Between Node and Ancestor.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1026. Maximum Difference Between Node and Ancestor.h"; sourceTree = "<group>"; };
		A1E3FF44276DEBBC00AC595D /* 1043. Partition Array for Maximum Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1043. Partition Array for Maximum Sum.h"; sourceTree = "<group>"; };
		A1E3FF46276DEBBC00AC595D /* 797. All Paths From Source to Target.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "797. All Paths From Source to Target.h"; sourceTree = "<group>"; };
		A1E3FF48276DEBBC00AC595D /* 885. Spiral Matrix III.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "885. Spiral Matrix III.h"; sourceTree = "<group>"; };
		A1E3FF4A276DEBBC00AC595D /* 983. Minimum Cost For Tickets.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "983. Minimum Cost For Tickets.h"; sourceTree = "<group>"; };
		A1E3FF4C276DEBBC00AC595D /* 807. Max Increase to Keep City Skyline.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "807. Max Increase to Keep City Skyline.h"; sourceTree = "<group>"; };
		A1E3FF4E276DEBBC00AC595D /* 347. Top K Frequent Elements.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "347. Top K Frequent Elements.h"; sourceTree = "<group>"; };
		A1E3FF50276DEBBC00AC595D /* 969. Pancake Sorting.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "969. Pancake Sorting.h"; sourceTree = "<group>"; };
		A1E3FF52276DEBBC00AC595D /* 1233. Remove Sub-Folders from the Filesystem.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1233. Remove Sub-Folders from the Filesystem.h"; sourceTree = "<group>"; };
		A1E3FF54276DEBBD00AC595D /* 34. Find First and Last Position of Element in Sorted Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "34. Find First and Last Position of Element in Sorted Array.h"; sourceTree = "<group>"; };
		A1E3FF56276DEBBD00AC595D /* 874. Walking Robot Simulation.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "874. Walking Robot Simulation.h"; sourceTree = "<group>"; };
		A1E3FF58276DEBBD00AC595D /* 1637. Widest Vertical Area Between Two Points Containing No Points.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1637. Widest Vertical Area Between Two Points Containing No Points.h"; sourceTree = "<group>"; };
		A1E3FF5A276DEBBD00AC595D /* 508. Most Frequent Subtree Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "508. Most Frequent Subtree Sum.h"; sourceTree = "<group>"; };
		A1E3FF5C276DEBBD00AC595D /* 15. 3Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "15. 3Sum.h"; sourceTree = "<group>"; };
		A1E3FF5E276DEBBD00AC595D /* 75. Sort Colors.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "75. Sort Colors.h"; sourceTree = "<group>"; };
		A1E3FF60276DEBBD00AC595D /* 684. Redundant Connection.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "684. Redundant Connection.h"; sourceTree = "<group>"; };
		A1E3FF62276DEBBD00AC595D /* 1094. Car Pooling.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1094. Car Pooling.h"; sourceTree = "<group>"; };
		A1E3FF64276DEBBD00AC595D /* 77. Combinations.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "77. Combinations.h"; sourceTree = "<group>"; };
		A1E3FF66276DEBBD00AC595D /* 1011. Capacity To Ship Packages Within D Days.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1011. Capacity To Ship Packages Within D Days.h"; sourceTree = "<group>"; };
		A1E3FF68276DEBBD00AC595D /* 427. Construct Quad Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "427. Construct Quad Tree.h"; sourceTree = "<group>"; };
		A1E3FF6A276DEBBD00AC595D /* 1072. Flip Columns For Maximum Number of Equal Rows.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1072. Flip Columns For Maximum Number of Equal Rows.h"; sourceTree = "<group>"; };
		A1E3FF6C276DEBBD00AC595D /* 1111. Maximum Nesting Depth of Two Valid Parentheses Strings.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1111. Maximum Nesting Depth of Two Valid Parentheses Strings.h"; sourceTree = "<group>"; };
		A1E3FF6E276DEBBD00AC595D /* 1079. Letter Tile Possibilities.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1079. Letter Tile Possibilities.h"; sourceTree = "<group>"; };
		A1E3FF6F276DEBBD00AC595D /* 1079. Letter Tile Possibilities.txt */ = {isa = PBXFileReference; lastKnownFileType = text; path = "1079. Letter Tile Possibilities.txt"; sourceTree = "<group>"; };
		A1E3FF71276DEBBD00AC595D /* 998. Maximum Binary Tree II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "998. Maximum Binary Tree II.h"; sourceTree = "<group>"; };
		A1E3FF73276DEBBD00AC595D /* 1008. Construct Binary Search Tree from Preorder Traversal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1008. Construct Binary Search Tree from Preorder Traversal.h"; sourceTree = "<group>"; };
		A1E3FF75276DEBBD00AC595D /* 25. Reverse Nodes in k-Group.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "25. Reverse Nodes in k-Group.h"; sourceTree = "<group>"; };
		A1E3FF77276DEBBD00AC595D /* 771. Jewels and Stones.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "771. Jewels and Stones.h"; sourceTree = "<group>"; };
		A1E3FF79276DEBBD00AC595D /* 841. Keys and Rooms .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "841. Keys and Rooms .h"; sourceTree = "<group>"; };
		A1E3FF7B276DEBBD00AC595D /* 1222. Queens That Can Attack the King.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1222. Queens That Can Attack the King.h"; sourceTree = "<group>"; };
		A1E3FF7D276DEBBE00AC595D /* 1268. Search Suggestions System.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1268. Search Suggestions System.h"; sourceTree = "<group>"; };
		A1E3FF7F276DEBBE00AC595D /* 712. Minimum ASCII Delete Sum for Two Strings.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "712. Minimum ASCII Delete Sum for Two Strings.h"; sourceTree = "<group>"; };
		A1E3FF81276DEBBE00AC595D /* 11. Container With Most Water.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "11. Container With Most Water.h"; sourceTree = "<group>"; };
		A1E3FF83276DEBBE00AC595D /* 835. Image Overlap .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "835. Image Overlap .h"; sourceTree = "<group>"; };
		A1E3FF85276DEBBE00AC595D /* 1282. Group the People Given the Group Size They Belong To.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1282. Group the People Given the Group Size They Belong To.h"; sourceTree = "<group>"; };
		A1E3FF87276DEBBE00AC595D /* 1263. Minimum Moves to Move a Box to Their Target Location.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1263. Minimum Moves to Move a Box to Their Target Location.h"; sourceTree = "<group>"; };
		A1E3FF89276DEBBE00AC595D /* 1031. Maximum Sum of Two Non-Overlapping Subarrays.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1031. Maximum Sum of Two Non-Overlapping Subarrays.h"; sourceTree = "<group>"; };
		A1E3FF8B276DEBBE00AC595D /* 746. Min Cost Climbing Stairs.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "746. Min Cost Climbing Stairs.h"; sourceTree = "<group>"; };
		A1E3FF8D276DEBBE00AC595D /* 78. Subsets.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "78. Subsets.h"; sourceTree = "<group>"; };
		A1E3FF8F276DEBBE00AC595D /* 553. Optimal Division.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "553. Optimal Division.h"; sourceTree = "<group>"; };
		A1E3FF91276DEBBE00AC595D /* 513. Find Bottom Left Tree Value.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "513. Find Bottom Left Tree Value.h"; sourceTree = "<group>"; };
		A1E3FF93276DEBBE00AC595D /* 877. Stone Game.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "877. Stone Game.h"; sourceTree = "<group>"; };
		A1E3FF95276DEBBE00AC595D /* 1325. Delete Leaves With a Given Value.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1325. Delete Leaves With a Given Value.h"; sourceTree = "<group>"; };
		A1E3FF97276DEBBE00AC595D /* 1104. Path In Zigzag Labelled Binary Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1104. Path In Zigzag Labelled Binary Tree.h"; sourceTree = "<group>"; };
		A1E3FF99276DEBBE00AC595D /* 81. Search in Rotated Sorted Array II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "81. Search in Rotated Sorted Array II.h"; sourceTree = "<group>"; };
		A1E3FF9B276DEBBE00AC595D /* 96. Unique Binary Search Trees.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "96. Unique Binary Search Trees.h"; sourceTree = "<group>"; };
		A1E3FF9D276DEBBE00AC595D /* 63. Unique Paths II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "63. Unique Paths II.h"; sourceTree = "<group>"; };
		A1E3FF9F276DEBBE00AC595D /* 1123. Lowest Common Ancestor of Deepest Leaves.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1123. Lowest Common Ancestor of Deepest Leaves.h"; sourceTree = "<group>"; };
		A1E3FFA1276DEBBE00AC595D /* 890. Find and Replace Pattern.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "890. Find and Replace Pattern.h"; sourceTree = "<group>"; };
		A1E3FFA3276DEBBE00AC595D /* 53. Maximum Subarray.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "53. Maximum Subarray.h"; sourceTree = "<group>"; };
		A1E3FFA5276DEBBF00AC595D /* 97. Interleaving String.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "97. Interleaving String.h"; sourceTree = "<group>"; };
		A1E3FFA7276DEBBF00AC595D /* 894. All Possible Full Binary Trees.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "894. All Possible Full Binary Trees.h"; sourceTree = "<group>"; };
		A1E3FFA9276DEBBF00AC595D /* 865. Smallest Subtree with all the Deepest Nodes.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "865. Smallest Subtree with all the Deepest Nodes.h"; sourceTree = "<group>"; };
		A1E3FFAB276DEBBF00AC595D /* 1828. Queries on Number of Points Inside a Circle.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1828. Queries on Number of Points Inside a Circle.h"; sourceTree = "<group>"; };
		A1E3FFAD276DEBBF00AC595D /* 1003. Check If Word Is Valid After Substitutions.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1003. Check If Word Is Valid After Substitutions.h"; sourceTree = "<group>"; };
		A1E3FFAF276DEBBF00AC595D /* 609. Find Duplicate File in System.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "609. Find Duplicate File in System.h"; sourceTree = "<group>"; };
		A1E3FFB1276DEBBF00AC595D /* 1273. Delete Tree Nodes.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1273. Delete Tree Nodes.h"; sourceTree = "<group>"; };
		A1E3FFB3276DEBBF00AC595D /* 1877. Minimize Maximum Pair Sum in Array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1877. Minimize Maximum Pair Sum in Array.h"; sourceTree = "<group>"; };
		A1E3FFB5276DEBBF00AC595D /* 200. Number of Islands.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "200. Number of Islands.h"; sourceTree = "<group>"; };
		A1E3FFB7276DEBBF00AC595D /* 43. Multiply Strings.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "43. Multiply Strings.h"; sourceTree = "<group>"; };
		A1E3FFB9276DEBBF00AC595D /* 56. Merge Intervals.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "56. Merge Intervals.h"; sourceTree = "<group>"; };
		A1E3FFBB276DEBBF00AC595D /* 57. Insert Interval.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "57. Insert Interval.h"; sourceTree = "<group>"; };
		A1E3FFBD276DEBBF00AC595D /* 1090. Largest Values From Labels.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1090. Largest Values From Labels.h"; sourceTree = "<group>"; };
		A1E3FFBF276DEBBF00AC595D /* 82. Remove Duplicates from Sorted List II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "82. Remove Duplicates from Sorted List II.h"; sourceTree = "<group>"; };
		A1E3FFC1276DEBBF00AC595D /* 109. Convert Sorted List to Binary Search Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "109. Convert Sorted List to Binary Search Tree.h"; sourceTree = "<group>"; };
		A1E3FFC3276DEBBF00AC595D /* 18. 4Sum.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "18. 4Sum.h"; sourceTree = "<group>"; };
		A1E3FFC5276DEBBF00AC595D /* 529. Minesweeper.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "529. Minesweeper.h"; sourceTree = "<group>"; };
		A1E3FFC7276DEBBF00AC595D /* 951. Flip Equivalent Binary Trees.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "951. Flip Equivalent Binary Trees.h"; sourceTree = "<group>"; };
		A1E3FFC9276DEBBF00AC595D /* 40. Combination Sum II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "40. Combination Sum II.h"; sourceTree = "<group>"; };
		A1E3FFCB276DEBBF00AC595D /* 1019. Next Greater Node In Linked List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1019. Next Greater Node In Linked List.h"; sourceTree = "<group>"; };
		A1E3FFCD276DEBBF00AC595D /* 1161. Maximum Level Sum of a Binary Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1161. Maximum Level Sum of a Binary Tree.h"; sourceTree = "<group>"; };
		A1E3FFCF276DEBC000AC595D /* 5. Longest Palindromic Substring.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "5. Longest Palindromic Substring.h"; sourceTree = "<group>"; };
		A1E3FFD1276DEBC000AC595D /* 979. Distribute Coins in Binary Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "979. Distribute Coins in Binary Tree.h"; sourceTree = "<group>"; };
		A1E3FFD3276DEBC000AC595D /* 445. Add Two Numbers II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "445. Add Two Numbers II.h"; sourceTree = "<group>"; };
		A1E3FFD5276DEBC000AC595D /* 42. Trapping Rain Water.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "42. Trapping Rain Water.h"; sourceTree = "<group>"; };
		A1E3FFD7276DEBC000AC595D /* 639. Decode Ways II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "639. Decode Ways II.h"; sourceTree = "<group>"; };
		A1E3FFD9276DEBC000AC595D /* 707. Design Linked List.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "707. Design Linked List.h"; sourceTree = "<group>"; };
		A1E3FFDB276DEBC000AC595D /* 91. Decode Ways .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "91. Decode Ways .h"; sourceTree = "<group>"; };
		A1E3FFDD276DEBC000AC595D /* 617. Merge Two Binary Trees.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "617. Merge Two Binary Trees.h"; sourceTree = "<group>"; };
		A1E3FFDF276DEBC000AC595D /* 725. Split Linked List in Parts.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "725. Split Linked List in Parts.h"; sourceTree = "<group>"; };
		A1E3FFE1276DEBC000AC595D /* 17. Letter Combinations of a Phone Number.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "17. Letter Combinations of a Phone Number.h"; sourceTree = "<group>"; };
		A1E3FFE3276DEBC000AC595D /* 1247. Minimum Swaps to Make Strings Equal.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1247. Minimum Swaps to Make Strings Equal.h"; sourceTree = "<group>"; };
		A1E3FFE5276DEBC000AC595D /* 142. Linked List Cycle II.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "142. Linked List Cycle II.h"; sourceTree = "<group>"; };
		A1E3FFE7276DEBC000AC595D /* 946. Validate Stack Sequences.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "946. Validate Stack Sequences.h"; sourceTree = "<group>"; };
		A1E3FFE9276DEBC000AC595D /* 701. Insert into a Binary Search Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "701. Insert into a Binary Search Tree.h"; sourceTree = "<group>"; };
		A1E3FFEA276DEBC000AC595D /* 701. Insert into a Binary Search Tree.txt */ = {isa = PBXFileReference; lastKnownFileType = text; path = "701. Insert into a Binary Search Tree.txt"; sourceTree = "<group>"; };
		A1E3FFEC276DEBC000AC595D /* 98. Validate Binary Search Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "98. Validate Binary Search Tree.h"; sourceTree = "<group>"; };
		A1E3FFEE276DEBC000AC595D /* 1130. Minimum Cost Tree From Leaf Values.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1130. Minimum Cost Tree From Leaf Values.h"; sourceTree = "<group>"; };
		A1E3FFF0276DEBC000AC595D /* 1038. Binary Search Tree to Greater Sum Tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1038. Binary Search Tree to Greater Sum Tree.h"; sourceTree = "<group>"; };
		A1E3FFF2276DEBC000AC595D /* 1630. Arithmetic Subarrays.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1630. Arithmetic Subarrays.h"; sourceTree = "<group>"; };
		A1E3FFF4276DEBC000AC595D /* 1290. Convert Binary Number in a Linked List to Integer.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1290. Convert Binary Number in a Linked List to Integer.h"; sourceTree = "<group>"; };
		A1E3FFF6276DEBC000AC595D /* 912. Sort an Array .h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "912. Sort an Array .h"; sourceTree = "<group>"; };
		A1E3FFF8276DEBC000AC595D /* 55. Jump Game.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "55. Jump Game.h"; sourceTree = "<group>"; };
		A1E3FFFA276DEBC000AC595D /* 48. Rotate Image.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "48. Rotate Image.h"; sourceTree = "<group>"; };
		A1E3FFFC276DEBC000AC595D /* 709. To Lower Case.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "709. To Lower Case.h"; sourceTree = "<group>"; };
		A1E3FFFE276DEBC100AC595D /* 1110. Delete Nodes And Return Forest.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "1110. Delete Nodes And Return Forest.h"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		A169986B22FEBF6200F640E5 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		A169986522FEBF6200F640E5 = {
			isa = PBXGroup;
			children = (
				A169987822FEBF7300F640E5 /* alog */,
				A169987022FEBF6200F640E5 /* leetcode */,
				A169986F22FEBF6200F640E5 /* Products */,
			);
			sourceTree = "<group>";
		};
		A169986F22FEBF6200F640E5 /* Products */ = {
			isa = PBXGroup;
			children = (
				A169986E22FEBF6200F640E5 /* leetcode */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		A169987022FEBF6200F640E5 /* leetcode */ = {
			isa = PBXGroup;
			children = (
				A169987122FEBF6200F640E5 /* main.cpp */,
			);
			path = leetcode;
			sourceTree = "<group>";
		};
		A169987822FEBF7300F640E5 /* alog */ = {
			isa = PBXGroup;
			children = (
				A1E300AD276DEBC500AC595D /* 2. Add Two Numbers */,
				A1E3FF27276DEBBC00AC595D /* 3. Longest Substring Without Repeating Characters */,
				A1E3FFCE276DEBC000AC595D /* 5. Longest Palindromic Substring */,
				A1E3FF80276DEBBE00AC595D /* 11. Container With Most Water */,
				A1E3FF5B276DEBBD00AC595D /* 15. 3Sum */,
				A1E30055276DEBC200AC595D /* 16. 3Sum Closest */,
				A1E3FFE0276DEBC000AC595D /* 17. Letter Combinations of a Phone Number */,
				A1E3FFC2276DEBBF00AC595D /* 18. 4Sum */,
				A1E3FF74276DEBBD00AC595D /* 25. Reverse Nodes in k-Group */,
				A1E3FF23276DEBBB00AC595D /* 29. Divide Two Integers */,
				A1E3FFFF276DEBC100AC595D /* 31. Next Permutation */,
				A1E30073276DEBC300AC595D /* 33. Search in Rotated Sorted Array */,
				A1E3FF53276DEBBD00AC595D /* 34. Find First and Last Position of Element in Sorted Array */,
				A1E3006D276DEBC300AC595D /* 39. Combination Sum */,
				A1E3FFC8276DEBBF00AC595D /* 40. Combination Sum II */,
				A1E3FFD4276DEBC000AC595D /* 42. Trapping Rain Water */,
				A1E3FFB6276DEBBF00AC595D /* 43. Multiply Strings */,
				A1E30057276DEBC300AC595D /* 45. Jump Game II */,
				A1E30079276DEBC300AC595D /* 47. Permutations II */,
				A1E3FFF9276DEBC000AC595D /* 48. Rotate Image */,
				A1E300AF276DEBC500AC595D /* 49. Group Anagrams */,
				A1E30065276DEBC300AC595D /* 50. Pow(x, n) */,
				A1E3FFA2276DEBBE00AC595D /* 53. Maximum Subarray */,
				A1E30021276DEBC100AC595D /* 54. Spiral Matrix */,
				A1E3FFF7276DEBC000AC595D /* 55. Jump Game */,
				A1E3FFB8276DEBBF00AC595D /* 56. Merge Intervals */,
				A1E3FFBA276DEBBF00AC595D /* 57. Insert Interval */,
				A1E3009B276DEBC400AC595D /* 59. Spiral Matrix II */,
				A1E30014276DEBC100AC595D /* 61. Rotate List */,
				A1E3FF9C276DEBBE00AC595D /* 63. Unique Paths II */,
				A1E3FF21276DEBBB00AC595D /* 64. Minimum Path Sum */,
				A1E30093276DEBC400AC595D /* 69. Sqrt(x) */,
				A1E30081276DEBC300AC595D /* 71. Simplify Path */,
				A1E30029276DEBC200AC595D /* 73. Set Matrix Zeroes */,
				A1E30063276DEBC300AC595D /* 74. Search a 2D Matrix */,
				A1E3FF5D276DEBBD00AC595D /* 75. Sort Colors */,
				A1E3FF63276DEBBD00AC595D /* 77. Combinations */,
				A1E3FF8C276DEBBE00AC595D /* 78. Subsets */,
				A1E3002D276DEBC200AC595D /* 79. Word Search */,
				A1E3FF3D276DEBBC00AC595D /* 80. Remove Duplicates from Sorted Array II */,
				A1E3FF98276DEBBE00AC595D /* 81. Search in Rotated Sorted Array II */,
				A1E3FFBE276DEBBF00AC595D /* 82. Remove Duplicates from Sorted List II */,
				A1E30059276DEBC300AC595D /* 85. Maximal Rectangle */,
				A1E30019276DEBC100AC595D /* 86. Partition List */,
				A1E30012276DEBC100AC595D /* 90. Subsets II */,
				A1E3FFDA276DEBC000AC595D /* 91. Decode Ways */,
				A1E3000E276DEBC100AC595D /* 92. Reverse Linked List II */,
				A1E3FF29276DEBBC00AC595D /* 93. Restore IP Addresses */,
				A1E3FF9A276DEBBE00AC595D /* 96. Unique Binary Search Trees */,
				A1E3FFA4276DEBBE00AC595D /* 97. Interleaving String */,
				A1E3FFEB276DEBC000AC595D /* 98. Validate Binary Search Tree */,
				A1E30069276DEBC300AC595D /* 99. Recover Binary Search Tree */,
				A1E30053276DEBC200AC595D /* 103. Binary Tree Zigzag Level Order Traversal */,
				A1E3006F276DEBC300AC595D /* 105. Construct Binary Tree from Preorder and Inorder Traversal */,
				A1E300B1276E00AB00AC595D /* 106. Construct Binary Tree from Inorder and Postorder Traversal */,
				A1E3FFC0276DEBBF00AC595D /* 109. Convert Sorted List to Binary Search Tree */,
				A1E3FF2F276DEBBC00AC595D /* 121. Best Time to Buy and Sell Stock */,
				A1E3FFE4276DEBC000AC595D /* 142. Linked List Cycle II */,
				A1E30005276DEBC100AC595D /* 146. LRU Cache */,
				A1E30033276DEBC200AC595D /* 199. Binary Tree Right Side View */,
				A1E3FFB4276DEBBF00AC595D /* 200. Number of Islands */,
				A1E300A3276DEBC400AC595D /* 236. Lowest Common Ancestor of a Binary Tree */,
				A1E3FF4D276DEBBC00AC595D /* 347. Top K Frequent Elements */,
				A1E3FF67276DEBBD00AC595D /* 427. Construct Quad Tree */,
				A1E3007F276DEBC300AC595D /* 429. N-ary Tree Level Order Traversal */,
				A1E300A5276DEBC400AC595D /* 430. Flatten a Multilevel Doubly Linked List */,
				A1E3FF35276DEBBC00AC595D /* 443. String Compression */,
				A1E3FFD2276DEBC000AC595D /* 445. Add Two Numbers II */,
				A1E3FF59276DEBBD00AC595D /* 508. Most Frequent Subtree Sum */,
				A1E3FF90276DEBBE00AC595D /* 513. Find Bottom Left Tree Value */,
				A1E3004F276DEBC200AC595D /* 515. Find Largest Value in Each Tree Row */,
				A1E3001B276DEBC100AC595D /* 526. Beautiful Arrangement */,
				A1E3FFC4276DEBBF00AC595D /* 529. Minesweeper */,
				A1E30003276DEBC100AC595D /* 532. K-diff Pairs in an Array */,
				A1E30085276DEBC400AC595D /* 535. Encode and Decode TinyURL */,
				A1E3FF2B276DEBBC00AC595D /* 537. Complex Number Multiplication */,
				A1E30023276DEBC100AC595D /* 540. Single Element in a Sorted Array */,
				A1E30075276DEBC300AC595D /* 547. Friend Circles */,
				A1E3FF8E276DEBBE00AC595D /* 553. Optimal Division */,
				A1E3009D276DEBC400AC595D /* 565. Array Nesting */,
				A1E3008F276DEBC400AC595D /* 581. Shortest Unsorted Continuous Subarray */,
				A1E30067276DEBC300AC595D /* 605. Can Place Flowers */,
				A1E3FFAE276DEBBF00AC595D /* 609. Find Duplicate File in System */,
				A1E3FFDC276DEBC000AC595D /* 617. Merge Two Binary Trees */,
				A1E30025276DEBC100AC595D /* 633. Sum of Square Numbers */,
				A1E3FFD6276DEBC000AC595D /* 639. Decode Ways II */,
				A1E30083276DEBC400AC595D /* 647. Palindromic Substrings  */,
				A1E30089276DEBC400AC595D /* 648. Replace Words */,
				A1E3000B276DEBC100AC595D /* 654. Maximum Binary Tree */,
				A1E3009F276DEBC400AC595D /* 665. Non-decreasing Array */,
				A1E3FF5F276DEBBD00AC595D /* 684. Redundant Connection */,
				A1E3007B276DEBC300AC595D /* 686. Repeated String Match */,
				A1E30091276DEBC400AC595D /* 695. Max Area of Island */,
				A1E3FFE8276DEBC000AC595D /* 701. Insert into a Binary Search Tree */,
				A1E3FFD8276DEBC000AC595D /* 707. Design Linked List */,
				A1E3FFFB276DEBC000AC595D /* 709. To Lower Case */,
				A1E3FF7E276DEBBE00AC595D /* 712. Minimum ASCII Delete Sum for Two Strings */,
				A1E3FFDE276DEBC000AC595D /* 725. Split Linked List in Parts */,
				A1E3008B276DEBC400AC595D /* 739. Daily Temperatures  */,
				A1E3FF8A276DEBBE00AC595D /* 746. Min Cost Climbing Stairs */,
				A1E30043276DEBC200AC595D /* 763. Partition Labels */,
				A1E3FF76276DEBBD00AC595D /* 771. Jewels and Stones */,
				A1E3FF31276DEBBC00AC595D /* 789. Escape The Ghosts */,
				A1E3003F276DEBC200AC595D /* 791. Custom Sort String */,
				A1E3FF45276DEBBC00AC595D /* 797. All Paths From Source to Target */,
				A1E3FF4B276DEBBC00AC595D /* 807. Max Increase to Keep City Skyline */,
				A1E3004D276DEBC200AC595D /* 814. Binary Tree Pruning */,
				A1E3002B276DEBC200AC595D /* 817. Linked List Components */,
				A1E3FF82276DEBBE00AC595D /* 835. Image Overlap  */,
				A1E3FF78276DEBBD00AC595D /* 841. Keys and Rooms  */,
				A1E3001F276DEBC100AC595D /* 856. Score of Parentheses */,
				A1E30045276DEBC200AC595D /* 859. Buddy Strings */,
				A1E30095276DEBC400AC595D /* 861. Score After Flipping Matrix */,
				A1E3FFA8276DEBBF00AC595D /* 865. Smallest Subtree with all the Deepest Nodes */,
				A1E3FF55276DEBBD00AC595D /* 874. Walking Robot Simulation */,
				A1E3FF3F276DEBBC00AC595D /* 876. Middle of the Linked List */,
				A1E3FF92276DEBBE00AC595D /* 877. Stone Game */,
				A1E3FF47276DEBBC00AC595D /* 885. Spiral Matrix III */,
				A1E30035276DEBC200AC595D /* 889. Construct Binary Tree from Preorder and Postorder Traversal */,
				A1E3FFA0276DEBBE00AC595D /* 890. Find and Replace Pattern */,
				A1E3FFA6276DEBBF00AC595D /* 894. All Possible Full Binary Trees */,
				A1E3FFF5276DEBC000AC595D /* 912. Sort an Array  */,
				A1E30087276DEBC400AC595D /* 919. Complete Binary Tree Inserter */,
				A1E3FF1F276DEBBB00AC595D /* 921. Minimum Add to Make Parentheses Valid */,
				A1E3FF37276DEBBC00AC595D /* 931. Minimum Falling Path Sum */,
				A1E30007276DEBC100AC595D /* 932. Beautiful Array */,
				A1E30099276DEBC400AC595D /* 938. Range Sum of BST */,
				A1E3FFE6276DEBC000AC595D /* 946. Validate Stack Sequences */,
				A1E3FF19276DEBBB00AC595D /* 947. Most Stones Removed with Same Row or Column */,
				A1E3FF17276DEBBB00AC595D /* 950. Reveal Cards In Increasing Order */,
				A1E3FFC6276DEBBF00AC595D /* 951. Flip Equivalent Binary Trees */,
				A1E300A9276DEBC500AC595D /* 959. Regions Cut By Slashes */,
				A1E3FF4F276DEBBC00AC595D /* 969. Pancake Sorting */,
				A1E30097276DEBC400AC595D /* 973. K Closest Points to Origin */,
				A1E3FFD0276DEBC000AC595D /* 979. Distribute Coins in Binary Tree */,
				A1E3FF49276DEBBC00AC595D /* 983. Minimum Cost For Tickets */,
				A1E3005D276DEBC300AC595D /* 986. Interval List Intersections */,
				A1E3FF70276DEBBD00AC595D /* 998. Maximum Binary Tree II */,
				A1E3FF2D276DEBBC00AC595D /* 1002. Find Common Characters */,
				A1E3FFAC276DEBBF00AC595D /* 1003. Check If Word Is Valid After Substitutions */,
				A1E3007D276DEBC300AC595D /* 1004. Max Consecutive Ones III */,
				A1E3FF72276DEBBD00AC595D /* 1008. Construct Binary Search Tree from Preorder Traversal */,
				A1E3FF65276DEBBD00AC595D /* 1011. Capacity To Ship Packages Within D Days */,
				A1E30009276DEBC100AC595D /* 1016. Binary String With Substrings Representing 1 To N */,
				A1E30039276DEBC200AC595D /* 1017. Convert to Base -2  */,
				A1E3FFCA276DEBBF00AC595D /* 1019. Next Greater Node In Linked List */,
				A1E3002F276DEBC200AC595D /* 1020. Number of Enclaves */,
				A1E3003D276DEBC200AC595D /* 1023. Camelcase Matching */,
				A1E30016276DEBC100AC595D /* 1025.Divisor Game */,
				A1E3FF41276DEBBC00AC595D /* 1026. Maximum Difference Between Node and Ancestor */,
				A1E3FF88276DEBBE00AC595D /* 1031. Maximum Sum of Two Non-Overlapping Subarrays */,
				A1E3FFEF276DEBC000AC595D /* 1038. Binary Search Tree to Greater Sum Tree */,
				A1E3FF43276DEBBC00AC595D /* 1043. Partition Array for Maximum Sum */,
				A1E30027276DEBC100AC595D /* 1052. Grumpy Bookstore Owner */,
				A1E3FF69276DEBBD00AC595D /* 1072. Flip Columns For Maximum Number of Equal Rows */,
				A1E3FF6D276DEBBD00AC595D /* 1079. Letter Tile Possibilities */,
				A1E3FFBC276DEBBF00AC595D /* 1090. Largest Values From Labels */,
				A1E3FF61276DEBBD00AC595D /* 1094. Car Pooling */,
				A1E3FF96276DEBBE00AC595D /* 1104. Path In Zigzag Labelled Binary Tree */,
				A1E3005F276DEBC300AC595D /* 1105. Filling Bookcase Shelves */,
				A1E3FF1D276DEBBB00AC595D /* 1108. Defanging an IP Address */,
				A1E3FFFD276DEBC100AC595D /* 1110. Delete Nodes And Return Forest */,
				A1E3FF6B276DEBBD00AC595D /* 1111. Maximum Nesting Depth of Two Valid Parentheses Strings */,
				A1E30010276DEBC100AC595D /* 1115. Print FooBar Alternately */,
				A1E3008D276DEBC400AC595D /* 1116. Print Zero Even Odd */,
				A1E3FF9E276DEBBE00AC595D /* 1123. Lowest Common Ancestor of Deepest Leaves */,
				A1E3FFED276DEBC000AC595D /* 1130. Minimum Cost Tree From Leaf Values */,
				A1E3FF1B276DEBBB00AC595D /* 1140. Stone Game II */,
				A1E30037276DEBC200AC595D /* 1143. Longest Common Subsequence */,
				A1E3FFCC276DEBBF00AC595D /* 1161. Maximum Level Sum of a Binary Tree */,
				A1E3006B276DEBC300AC595D /* 1190. Reverse Substrings Between Each Pair of Parentheses */,
				A1E30051276DEBC200AC595D /* 1209. Remove All Adjacent Duplicates in String II */,
				A1E3FF25276DEBBB00AC595D /* 1219. Path with Maximum Gold */,
				A1E3FF7A276DEBBD00AC595D /* 1222. Queens That Can Attack the King */,
				A1E3005B276DEBC300AC595D /* 1227. Airplane Seat Assignment Probability */,
				A1E3FF51276DEBBC00AC595D /* 1233. Remove Sub-Folders from the Filesystem */,
				A1E300AB276DEBC500AC595D /* 1238. Circular Permutation in Binary Representation */,
				A1E3FFE2276DEBC000AC595D /* 1247. Minimum Swaps to Make Strings Equal */,
				A1E30071276DEBC300AC595D /* 1249. Minimum Remove to Make Valid Parentheses */,
				A1E30047276DEBC200AC595D /* 1254. Number of Closed Islands */,
				A1E3FF86276DEBBE00AC595D /* 1263. Minimum Moves to Move a Box to Their Target Location */,
				A1E30077276DEBC300AC595D /* 1267. Count Servers that Communicate */,
				A1E3FF7C276DEBBE00AC595D /* 1268. Search Suggestions System */,
				A1E3FFB0276DEBBF00AC595D /* 1273. Delete Tree Nodes */,
				A1E3FF84276DEBBE00AC595D /* 1282. Group the People Given the Group Size They Belong To */,
				A1E3FFF3276DEBC000AC595D /* 1290. Convert Binary Number in a Linked List to Integer */,
				A1E30001276DEBC100AC595D /* 1302. Deepest Leaves Sum */,
				A1E3001D276DEBC100AC595D /* 1305. All Elements in Two Binary Search Trees */,
				A1E3003B276DEBC200AC595D /* 1315. Sum of Nodes with Even-Valued Grandparent */,
				A1E3FF94276DEBBE00AC595D /* 1325. Delete Leaves With a Given Value */,
				A1E30061276DEBC300AC595D /* 1329. Sort the Matrix Diagonally */,
				A1E30031276DEBC200AC595D /* 1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree */,
				A1E300A1276DEBC400AC595D /* 1409. Queries on a Permutation With Key */,
				A1E30041276DEBC200AC595D /* 1415. The k-th Lexicographical String of All Happy Strings of Length n */,
				A1E3004B276DEBC200AC595D /* 1476. Subrectangle Queries */,
				A1E300A7276DEBC400AC595D /* 1551. Minimum Operations to Make Array Equal */,
				A1E30049276DEBC200AC595D /* 1605. Find Valid Matrix Given Row and Column Sums */,
				A1E3FFF1276DEBC000AC595D /* 1630. Arithmetic Subarrays */,
				A1E3FF57276DEBBD00AC595D /* 1637. Widest Vertical Area Between Two Points Containing No Points */,
				A1E3FF3B276DEBBC00AC595D /* 1689. Partitioning Into Minimum Number Of Deci-Binary Numbers */,
				A1E3FF33276DEBBC00AC595D /* 1769. Minimum Number of Operations to Move All Balls to Each Box */,
				A1E3FF39276DEBBC00AC595D /* 1817. Finding the Users Active Minutes */,
				A1E3FFAA276DEBBF00AC595D /* 1828. Queries on Number of Points Inside a Circle */,
				A1E3FFB2276DEBBF00AC595D /* 1877. Minimize Maximum Pair Sum in Array */,
				A12C8ADD234124DC000036C8 /* DataStructures.h */,
			);
			path = alog;
			sourceTree = "<group>";
		};
		A1E30001276DEBC100AC595D /* 1302. Deepest Leaves Sum */ = {
			isa = PBXGroup;
			children = (
				A1E30002276DEBC100AC595D /* 1302. Deepest Leaves Sum.h */,
			);
			path = "1302. Deepest Leaves Sum";
			sourceTree = "<group>";
		};
		A1E30003276DEBC100AC595D /* 532. K-diff Pairs in an Array */ = {
			isa = PBXGroup;
			children = (
				A1E30004276DEBC100AC595D /* 532. K-diff Pairs in an Array.h */,
			);
			path = "532. K-diff Pairs in an Array";
			sourceTree = "<group>";
		};
		A1E30005276DEBC100AC595D /* 146. LRU Cache */ = {
			isa = PBXGroup;
			children = (
				A1E30006276DEBC100AC595D /* 146. LRU Cache.h */,
			);
			path = "146. LRU Cache";
			sourceTree = "<group>";
		};
		A1E30007276DEBC100AC595D /* 932. Beautiful Array */ = {
			isa = PBXGroup;
			children = (
				A1E30008276DEBC100AC595D /* 932. Beautiful Array.h */,
			);
			path = "932. Beautiful Array";
			sourceTree = "<group>";
		};
		A1E30009276DEBC100AC595D /* 1016. Binary String With Substrings Representing 1 To N */ = {
			isa = PBXGroup;
			children = (
				A1E3000A276DEBC100AC595D /* 1016. Binary String With Substrings Representing 1 To N.h */,
			);
			path = "1016. Binary String With Substrings Representing 1 To N";
			sourceTree = "<group>";
		};
		A1E3000B276DEBC100AC595D /* 654. Maximum Binary Tree */ = {
			isa = PBXGroup;
			children = (
				A1E3000C276DEBC100AC595D /* 654. Maximum Binary Tree.txt */,
				A1E3000D276DEBC100AC595D /* 654. Maximum Binary Tree.h */,
			);
			path = "654. Maximum Binary Tree";
			sourceTree = "<group>";
		};
		A1E3000E276DEBC100AC595D /* 92. Reverse Linked List II */ = {
			isa = PBXGroup;
			children = (
				A1E3000F276DEBC100AC595D /* 92. Reverse Linked List II.h */,
			);
			path = "92. Reverse Linked List II";
			sourceTree = "<group>";
		};
		A1E30010276DEBC100AC595D /* 1115. Print FooBar Alternately */ = {
			isa = PBXGroup;
			children = (
				A1E30011276DEBC100AC595D /* 1115. Print FooBar Alternately.h */,
			);
			path = "1115. Print FooBar Alternately";
			sourceTree = "<group>";
		};
		A1E30012276DEBC100AC595D /* 90. Subsets II */ = {
			isa = PBXGroup;
			children = (
				A1E30013276DEBC100AC595D /* 90. Subsets II.h */,
			);
			path = "90. Subsets II";
			sourceTree = "<group>";
		};
		A1E30014276DEBC100AC595D /* 61. Rotate List */ = {
			isa = PBXGroup;
			children = (
				A1E30015276DEBC100AC595D /* 61. Rotate List.h */,
			);
			path = "61. Rotate List";
			sourceTree = "<group>";
		};
		A1E30016276DEBC100AC595D /* 1025.Divisor Game */ = {
			isa = PBXGroup;
			children = (
				A1E30017276DEBC100AC595D /* 1025. Divisor Game.h */,
				A1E30018276DEBC100AC595D /* README.md */,
			);
			path = "1025.Divisor Game";
			sourceTree = "<group>";
		};
		A1E30019276DEBC100AC595D /* 86. Partition List */ = {
			isa = PBXGroup;
			children = (
				A1E3001A276DEBC100AC595D /* 86. Partition List.h */,
			);
			path = "86. Partition List";
			sourceTree = "<group>";
		};
		A1E3001B276DEBC100AC595D /* 526. Beautiful Arrangement */ = {
			isa = PBXGroup;
			children = (
				A1E3001C276DEBC100AC595D /* 526. Beautiful Arrangement.h */,
			);
			path = "526. Beautiful Arrangement";
			sourceTree = "<group>";
		};
		A1E3001D276DEBC100AC595D /* 1305. All Elements in Two Binary Search Trees */ = {
			isa = PBXGroup;
			children = (
				A1E3001E276DEBC100AC595D /* 1305. All Elements in Two Binary Search Trees.h */,
			);
			path = "1305. All Elements in Two Binary Search Trees";
			sourceTree = "<group>";
		};
		A1E3001F276DEBC100AC595D /* 856. Score of Parentheses */ = {
			isa = PBXGroup;
			children = (
				A1E30020276DEBC100AC595D /* 856. Score of Parentheses.h */,
			);
			path = "856. Score of Parentheses";
			sourceTree = "<group>";
		};
		A1E30021276DEBC100AC595D /* 54. Spiral Matrix */ = {
			isa = PBXGroup;
			children = (
				A1E30022276DEBC100AC595D /* 54. Spiral Matrix.h */,
			);
			path = "54. Spiral Matrix";
			sourceTree = "<group>";
		};
		A1E30023276DEBC100AC595D /* 540. Single Element in a Sorted Array */ = {
			isa = PBXGroup;
			children = (
				A1E30024276DEBC100AC595D /* 540. Single Element in a Sorted Array.h */,
			);
			path = "540. Single Element in a Sorted Array";
			sourceTree = "<group>";
		};
		A1E30025276DEBC100AC595D /* 633. Sum of Square Numbers */ = {
			isa = PBXGroup;
			children = (
				A1E30026276DEBC100AC595D /* 633. Sum of Square Numbers.h */,
			);
			path = "633. Sum of Square Numbers";
			sourceTree = "<group>";
		};
		A1E30027276DEBC100AC595D /* 1052. Grumpy Bookstore Owner */ = {
			isa = PBXGroup;
			children = (
				A1E30028276DEBC100AC595D /* 1052. Grumpy Bookstore Owner.h */,
			);
			path = "1052. Grumpy Bookstore Owner";
			sourceTree = "<group>";
		};
		A1E30029276DEBC200AC595D /* 73. Set Matrix Zeroes */ = {
			isa = PBXGroup;
			children = (
				A1E3002A276DEBC200AC595D /* 73. Set Matrix Zeroes.h */,
			);
			path = "73. Set Matrix Zeroes";
			sourceTree = "<group>";
		};
		A1E3002B276DEBC200AC595D /* 817. Linked List Components */ = {
			isa = PBXGroup;
			children = (
				A1E3002C276DEBC200AC595D /* 817. Linked List Components.h */,
			);
			path = "817. Linked List Components";
			sourceTree = "<group>";
		};
		A1E3002D276DEBC200AC595D /* 79. Word Search */ = {
			isa = PBXGroup;
			children = (
				A1E3002E276DEBC200AC595D /* 79. Word Search.h */,
			);
			path = "79. Word Search";
			sourceTree = "<group>";
		};
		A1E3002F276DEBC200AC595D /* 1020. Number of Enclaves */ = {
			isa = PBXGroup;
			children = (
				A1E30030276DEBC200AC595D /* 1020. Number of Enclaves.h */,
			);
			path = "1020. Number of Enclaves";
			sourceTree = "<group>";
		};
		A1E30031276DEBC200AC595D /* 1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree */ = {
			isa = PBXGroup;
			children = (
				A1E30032276DEBC200AC595D /* 1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree.h */,
			);
			path = "1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree";
			sourceTree = "<group>";
		};
		A1E30033276DEBC200AC595D /* 199. Binary Tree Right Side View */ = {
			isa = PBXGroup;
			children = (
				A1E30034276DEBC200AC595D /* 199. Binary Tree Right Side View.h */,
			);
			path = "199. Binary Tree Right Side View";
			sourceTree = "<group>";
		};
		A1E30035276DEBC200AC595D /* 889. Construct Binary Tree from Preorder and Postorder Traversal */ = {
			isa = PBXGroup;
			children = (
				A1E30036276DEBC200AC595D /* 889. Construct Binary Tree from Preorder and Postorder Traversal.h */,
			);
			path = "889. Construct Binary Tree from Preorder and Postorder Traversal";
			sourceTree = "<group>";
		};
		A1E30037276DEBC200AC595D /* 1143. Longest Common Subsequence */ = {
			isa = PBXGroup;
			children = (
				A1E30038276DEBC200AC595D /* 1143. Longest Common Subsequence.h */,
			);
			path = "1143. Longest Common Subsequence";
			sourceTree = "<group>";
		};
		A1E30039276DEBC200AC595D /* 1017. Convert to Base -2  */ = {
			isa = PBXGroup;
			children = (
				A1E3003A276DEBC200AC595D /* 1017. Convert to Base -2 .h */,
			);
			path = "1017. Convert to Base -2 ";
			sourceTree = "<group>";
		};
		A1E3003B276DEBC200AC595D /* 1315. Sum of Nodes with Even-Valued Grandparent */ = {
			isa = PBXGroup;
			children = (
				A1E3003C276DEBC200AC595D /* 1315. Sum of Nodes with Even-Valued Grandparent.h */,
			);
			path = "1315. Sum of Nodes with Even-Valued Grandparent";
			sourceTree = "<group>";
		};
		A1E3003D276DEBC200AC595D /* 1023. Camelcase Matching */ = {
			isa = PBXGroup;
			children = (
				A1E3003E276DEBC200AC595D /* 1023. Camelcase Matching.h */,
			);
			path = "1023. Camelcase Matching";
			sourceTree = "<group>";
		};
		A1E3003F276DEBC200AC595D /* 791. Custom Sort String */ = {
			isa = PBXGroup;
			children = (
				A1E30040276DEBC200AC595D /* 791. Custom Sort String.h */,
			);
			path = "791. Custom Sort String";
			sourceTree = "<group>";
		};
		A1E30041276DEBC200AC595D /* 1415. The k-th Lexicographical String of All Happy Strings of Length n */ = {
			isa = PBXGroup;
			children = (
				A1E30042276DEBC200AC595D /* 1415. The k-th Lexicographical String of All Happy Strings of Length n.h */,
			);
			path = "1415. The k-th Lexicographical String of All Happy Strings of Length n";
			sourceTree = "<group>";
		};
		A1E30043276DEBC200AC595D /* 763. Partition Labels */ = {
			isa = PBXGroup;
			children = (
				A1E30044276DEBC200AC595D /* 763. Partition Labels.h */,
			);
			path = "763. Partition Labels";
			sourceTree = "<group>";
		};
		A1E30045276DEBC200AC595D /* 859. Buddy Strings */ = {
			isa = PBXGroup;
			children = (
				A1E30046276DEBC200AC595D /* 859. Buddy Strings.h */,
			);
			path = "859. Buddy Strings";
			sourceTree = "<group>";
		};
		A1E30047276DEBC200AC595D /* 1254. Number of Closed Islands */ = {
			isa = PBXGroup;
			children = (
				A1E30048276DEBC200AC595D /* 1254. Number of Closed Islands.h */,
			);
			path = "1254. Number of Closed Islands";
			sourceTree = "<group>";
		};
		A1E30049276DEBC200AC595D /* 1605. Find Valid Matrix Given Row and Column Sums */ = {
			isa = PBXGroup;
			children = (
				A1E3004A276DEBC200AC595D /* 1605. Find Valid Matrix Given Row and Column Sums.h */,
			);
			path = "1605. Find Valid Matrix Given Row and Column Sums";
			sourceTree = "<group>";
		};
		A1E3004B276DEBC200AC595D /* 1476. Subrectangle Queries */ = {
			isa = PBXGroup;
			children = (
				A1E3004C276DEBC200AC595D /* 1476. Subrectangle Queries.h */,
			);
			path = "1476. Subrectangle Queries";
			sourceTree = "<group>";
		};
		A1E3004D276DEBC200AC595D /* 814. Binary Tree Pruning */ = {
			isa = PBXGroup;
			children = (
				A1E3004E276DEBC200AC595D /* 814. Binary Tree Pruning.h */,
			);
			path = "814. Binary Tree Pruning";
			sourceTree = "<group>";
		};
		A1E3004F276DEBC200AC595D /* 515. Find Largest Value in Each Tree Row */ = {
			isa = PBXGroup;
			children = (
				A1E30050276DEBC200AC595D /* 515. Find Largest Value in Each Tree Row.h */,
			);
			path = "515. Find Largest Value in Each Tree Row";
			sourceTree = "<group>";
		};
		A1E30051276DEBC200AC595D /* 1209. Remove All Adjacent Duplicates in String II */ = {
			isa = PBXGroup;
			children = (
				A1E30052276DEBC200AC595D /* 1209. Remove All Adjacent Duplicates in String II.h */,
			);
			path = "1209. Remove All Adjacent Duplicates in String II";
			sourceTree = "<group>";
		};
		A1E30053276DEBC200AC595D /* 103. Binary Tree Zigzag Level Order Traversal */ = {
			isa = PBXGroup;
			children = (
				A1E30054276DEBC200AC595D /* 103. Binary Tree Zigzag Level Order Traversal.h */,
			);
			path = "103. Binary Tree Zigzag Level Order Traversal";
			sourceTree = "<group>";
		};
		A1E30055276DEBC200AC595D /* 16. 3Sum Closest */ = {
			isa = PBXGroup;
			children = (
				A1E30056276DEBC200AC595D /* 16. 3Sum Closest.h */,
			);
			path = "16. 3Sum Closest";
			sourceTree = "<group>";
		};
		A1E30057276DEBC300AC595D /* 45. Jump Game II */ = {
			isa = PBXGroup;
			children = (
				A1E30058276DEBC300AC595D /* 45. Jump Game II.h */,
			);
			path = "45. Jump Game II";
			sourceTree = "<group>";
		};
		A1E30059276DEBC300AC595D /* 85. Maximal Rectangle */ = {
			isa = PBXGroup;
			children = (
				A1E3005A276DEBC300AC595D /* 85. Maximal Rectangle.h */,
			);
			path = "85. Maximal Rectangle";
			sourceTree = "<group>";
		};
		A1E3005B276DEBC300AC595D /* 1227. Airplane Seat Assignment Probability */ = {
			isa = PBXGroup;
			children = (
				A1E3005C276DEBC300AC595D /* 1227. Airplane Seat Assignment Probability.h */,
			);
			path = "1227. Airplane Seat Assignment Probability";
			sourceTree = "<group>";
		};
		A1E3005D276DEBC300AC595D /* 986. Interval List Intersections */ = {
			isa = PBXGroup;
			children = (
				A1E3005E276DEBC300AC595D /* 986. Interval List Intersections.h */,
			);
			path = "986. Interval List Intersections";
			sourceTree = "<group>";
		};
		A1E3005F276DEBC300AC595D /* 1105. Filling Bookcase Shelves */ = {
			isa = PBXGroup;
			children = (
				A1E30060276DEBC300AC595D /* 1105. Filling Bookcase Shelves.h */,
			);
			path = "1105. Filling Bookcase Shelves";
			sourceTree = "<group>";
		};
		A1E30061276DEBC300AC595D /* 1329. Sort the Matrix Diagonally */ = {
			isa = PBXGroup;
			children = (
				A1E30062276DEBC300AC595D /* 1329. Sort the Matrix Diagonally.h */,
			);
			path = "1329. Sort the Matrix Diagonally";
			sourceTree = "<group>";
		};
		A1E30063276DEBC300AC595D /* 74. Search a 2D Matrix */ = {
			isa = PBXGroup;
			children = (
				A1E30064276DEBC300AC595D /* 74. Search a 2D Matrix.h */,
			);
			path = "74. Search a 2D Matrix";
			sourceTree = "<group>";
		};
		A1E30065276DEBC300AC595D /* 50. Pow(x, n) */ = {
			isa = PBXGroup;
			children = (
				A1E30066276DEBC300AC595D /* 50. Pow(x, n).h */,
			);
			path = "50. Pow(x, n)";
			sourceTree = "<group>";
		};
		A1E30067276DEBC300AC595D /* 605. Can Place Flowers */ = {
			isa = PBXGroup;
			children = (
				A1E30068276DEBC300AC595D /* 605. Can Place Flowers.h */,
			);
			path = "605. Can Place Flowers";
			sourceTree = "<group>";
		};
		A1E30069276DEBC300AC595D /* 99. Recover Binary Search Tree */ = {
			isa = PBXGroup;
			children = (
				A1E3006A276DEBC300AC595D /* 99. Recover Binary Search Tree.h */,
			);
			path = "99. Recover Binary Search Tree";
			sourceTree = "<group>";
		};
		A1E3006B276DEBC300AC595D /* 1190. Reverse Substrings Between Each Pair of Parentheses */ = {
			isa = PBXGroup;
			children = (
				A1E3006C276DEBC300AC595D /* 1190. Reverse Substrings Between Each Pair of Parentheses.h */,
			);
			path = "1190. Reverse Substrings Between Each Pair of Parentheses";
			sourceTree = "<group>";
		};
		A1E3006D276DEBC300AC595D /* 39. Combination Sum */ = {
			isa = PBXGroup;
			children = (
				A1E3006E276DEBC300AC595D /* 39. Combination Sum.h */,
			);
			path = "39. Combination Sum";
			sourceTree = "<group>";
		};
		A1E3006F276DEBC300AC595D /* 105. Construct Binary Tree from Preorder and Inorder Traversal */ = {
			isa = PBXGroup;
			children = (
				A1E30070276DEBC300AC595D /* 105. Construct Binary Tree from Preorder and Inorder Traversal.h */,
			);
			path = "105. Construct Binary Tree from Preorder and Inorder Traversal";
			sourceTree = "<group>";
		};
		A1E30071276DEBC300AC595D /* 1249. Minimum Remove to Make Valid Parentheses */ = {
			isa = PBXGroup;
			children = (
				A1E30072276DEBC300AC595D /* 1249. Minimum Remove to Make Valid Parentheses.h */,
			);
			path = "1249. Minimum Remove to Make Valid Parentheses";
			sourceTree = "<group>";
		};
		A1E30073276DEBC300AC595D /* 33. Search in Rotated Sorted Array */ = {
			isa = PBXGroup;
			children = (
				A1E30074276DEBC300AC595D /* 33. Search in Rotated Sorted Array.h */,
			);
			path = "33. Search in Rotated Sorted Array";
			sourceTree = "<group>";
		};
		A1E30075276DEBC300AC595D /* 547. Friend Circles */ = {
			isa = PBXGroup;
			children = (
				A1E30076276DEBC300AC595D /* 547. Friend Circles.h */,
			);
			path = "547. Friend Circles";
			sourceTree = "<group>";
		};
		A1E30077276DEBC300AC595D /* 1267. Count Servers that Communicate */ = {
			isa = PBXGroup;
			children = (
				A1E30078276DEBC300AC595D /* 1267. Count Servers that Communicate.h */,
			);
			path = "1267. Count Servers that Communicate";
			sourceTree = "<group>";
		};
		A1E30079276DEBC300AC595D /* 47. Permutations II */ = {
			isa = PBXGroup;
			children = (
				A1E3007A276DEBC300AC595D /* 47. Permutations II.h */,
			);
			path = "47. Permutations II";
			sourceTree = "<group>";
		};
		A1E3007B276DEBC300AC595D /* 686. Repeated String Match */ = {
			isa = PBXGroup;
			children = (
				A1E3007C276DEBC300AC595D /* 686. Repeated String Match.h */,
			);
			path = "686. Repeated String Match";
			sourceTree = "<group>";
		};
		A1E3007D276DEBC300AC595D /* 1004. Max Consecutive Ones III */ = {
			isa = PBXGroup;
			children = (
				A1E3007E276DEBC300AC595D /* 1004. Max Consecutive Ones III.h */,
			);
			path = "1004. Max Consecutive Ones III";
			sourceTree = "<group>";
		};
		A1E3007F276DEBC300AC595D /* 429. N-ary Tree Level Order Traversal */ = {
			isa = PBXGroup;
			children = (
				A1E30080276DEBC300AC595D /* 429. N-ary Tree Level Order Traversal.h */,
			);
			path = "429. N-ary Tree Level Order Traversal";
			sourceTree = "<group>";
		};
		A1E30081276DEBC300AC595D /* 71. Simplify Path */ = {
			isa = PBXGroup;
			children = (
				A1E30082276DEBC400AC595D /* 71. Simplify Path.h */,
			);
			path = "71. Simplify Path";
			sourceTree = "<group>";
		};
		A1E30083276DEBC400AC595D /* 647. Palindromic Substrings  */ = {
			isa = PBXGroup;
			children = (
				A1E30084276DEBC400AC595D /* 647. Palindromic Substrings .h */,
			);
			path = "647. Palindromic Substrings ";
			sourceTree = "<group>";
		};
		A1E30085276DEBC400AC595D /* 535. Encode and Decode TinyURL */ = {
			isa = PBXGroup;
			children = (
				A1E30086276DEBC400AC595D /* 535. Encode and Decode TinyURL.h */,
			);
			path = "535. Encode and Decode TinyURL";
			sourceTree = "<group>";
		};
		A1E30087276DEBC400AC595D /* 919. Complete Binary Tree Inserter */ = {
			isa = PBXGroup;
			children = (
				A1E30088276DEBC400AC595D /* 919. Complete Binary Tree Inserter.h */,
			);
			path = "919. Complete Binary Tree Inserter";
			sourceTree = "<group>";
		};
		A1E30089276DEBC400AC595D /* 648. Replace Words */ = {
			isa = PBXGroup;
			children = (
				A1E3008A276DEBC400AC595D /* 648. Replace Words.h */,
			);
			path = "648. Replace Words";
			sourceTree = "<group>";
		};
		A1E3008B276DEBC400AC595D /* 739. Daily Temperatures  */ = {
			isa = PBXGroup;
			children = (
				A1E3008C276DEBC400AC595D /* 739. Daily Temperatures .h */,
			);
			path = "739. Daily Temperatures ";
			sourceTree = "<group>";
		};
		A1E3008D276DEBC400AC595D /* 1116. Print Zero Even Odd */ = {
			isa = PBXGroup;
			children = (
				A1E3008E276DEBC400AC595D /* 1116. Print Zero Even Odd.h */,
			);
			path = "1116. Print Zero Even Odd";
			sourceTree = "<group>";
		};
		A1E3008F276DEBC400AC595D /* 581. Shortest Unsorted Continuous Subarray */ = {
			isa = PBXGroup;
			children = (
				A1E30090276DEBC400AC595D /* 581. Shortest Unsorted Continuous Subarray.h */,
			);
			path = "581. Shortest Unsorted Continuous Subarray";
			sourceTree = "<group>";
		};
		A1E30091276DEBC400AC595D /* 695. Max Area of Island */ = {
			isa = PBXGroup;
			children = (
				A1E30092276DEBC400AC595D /* 695. Max Area of Island.h */,
			);
			path = "695. Max Area of Island";
			sourceTree = "<group>";
		};
		A1E30093276DEBC400AC595D /* 69. Sqrt(x) */ = {
			isa = PBXGroup;
			children = (
				A1E30094276DEBC400AC595D /* 69. Sqrt(x).h */,
			);
			path = "69. Sqrt(x)";
			sourceTree = "<group>";
		};
		A1E30095276DEBC400AC595D /* 861. Score After Flipping Matrix */ = {
			isa = PBXGroup;
			children = (
				A1E30096276DEBC400AC595D /* 861. Score After Flipping Matrix.h */,
			);
			path = "861. Score After Flipping Matrix";
			sourceTree = "<group>";
		};
		A1E30097276DEBC400AC595D /* 973. K Closest Points to Origin */ = {
			isa = PBXGroup;
			children = (
				A1E30098276DEBC400AC595D /* 973. K Closest Points to Origin.h */,
			);
			path = "973. K Closest Points to Origin";
			sourceTree = "<group>";
		};
		A1E30099276DEBC400AC595D /* 938. Range Sum of BST */ = {
			isa = PBXGroup;
			children = (
				A1E3009A276DEBC400AC595D /* 938. Range Sum of BST.h */,
			);
			path = "938. Range Sum of BST";
			sourceTree = "<group>";
		};
		A1E3009B276DEBC400AC595D /* 59. Spiral Matrix II */ = {
			isa = PBXGroup;
			children = (
				A1E3009C276DEBC400AC595D /* 59. Spiral Matrix II.h */,
			);
			path = "59. Spiral Matrix II";
			sourceTree = "<group>";
		};
		A1E3009D276DEBC400AC595D /* 565. Array Nesting */ = {
			isa = PBXGroup;
			children = (
				A1E3009E276DEBC400AC595D /* 565. Array Nesting.h */,
			);
			path = "565. Array Nesting";
			sourceTree = "<group>";
		};
		A1E3009F276DEBC400AC595D /* 665. Non-decreasing Array */ = {
			isa = PBXGroup;
			children = (
				A1E300A0276DEBC400AC595D /* 665. Non-decreasing Array.h */,
			);
			path = "665. Non-decreasing Array";
			sourceTree = "<group>";
		};
		A1E300A1276DEBC400AC595D /* 1409. Queries on a Permutation With Key */ = {
			isa = PBXGroup;
			children = (
				A1E300A2276DEBC400AC595D /* 1409. Queries on a Permutation With Key.h */,
			);
			path = "1409. Queries on a Permutation With Key";
			sourceTree = "<group>";
		};
		A1E300A3276DEBC400AC595D /* 236. Lowest Common Ancestor of a Binary Tree */ = {
			isa = PBXGroup;
			children = (
				A1E300A4276DEBC400AC595D /* 236. Lowest Common Ancestor of a Binary Tree.h */,
			);
			path = "236. Lowest Common Ancestor of a Binary Tree";
			sourceTree = "<group>";
		};
		A1E300A5276DEBC400AC595D /* 430. Flatten a Multilevel Doubly Linked List */ = {
			isa = PBXGroup;
			children = (
				A1E300A6276DEBC400AC595D /* 430. Flatten a Multilevel Doubly Linked List.h */,
			);
			path = "430. Flatten a Multilevel Doubly Linked List";
			sourceTree = "<group>";
		};
		A1E300A7276DEBC400AC595D /* 1551. Minimum Operations to Make Array Equal */ = {
			isa = PBXGroup;
			children = (
				A1E300A8276DEBC400AC595D /* 1551. Minimum Operations to Make Array Equal.h */,
			);
			path = "1551. Minimum Operations to Make Array Equal";
			sourceTree = "<group>";
		};
		A1E300A9276DEBC500AC595D /* 959. Regions Cut By Slashes */ = {
			isa = PBXGroup;
			children = (
				A1E300AA276DEBC500AC595D /* 959. Regions Cut By Slashes.h */,
			);
			path = "959. Regions Cut By Slashes";
			sourceTree = "<group>";
		};
		A1E300AB276DEBC500AC595D /* 1238. Circular Permutation in Binary Representation */ = {
			isa = PBXGroup;
			children = (
				A1E300AC276DEBC500AC595D /* 1238. Circular Permutation in Binary Representation.h */,
			);
			path = "1238. Circular Permutation in Binary Representation";
			sourceTree = "<group>";
		};
		A1E300AD276DEBC500AC595D /* 2. Add Two Numbers */ = {
			isa = PBXGroup;
			children = (
				A1E300AE276DEBC500AC595D /* 2. Add Two Numbers.h */,
			);
			path = "2. Add Two Numbers";
			sourceTree = "<group>";
		};
		A1E300AF276DEBC500AC595D /* 49. Group Anagrams */ = {
			isa = PBXGroup;
			children = (
				A1E300B0276DEBC500AC595D /* 49. Group Anagrams.h */,
			);
			path = "49. Group Anagrams";
			sourceTree = "<group>";
		};
		A1E300B1276E00AB00AC595D /* 106. Construct Binary Tree from Inorder and Postorder Traversal */ = {
			isa = PBXGroup;
			children = (
				A1E300B2276E00B700AC595D /* 106. Construct Binary Tree from Inorder and Postorder Traversal.h */,
			);
			path = "106. Construct Binary Tree from Inorder and Postorder Traversal";
			sourceTree = "<group>";
		};
		A1E3FF17276DEBBB00AC595D /* 950. Reveal Cards In Increasing Order */ = {
			isa = PBXGroup;
			children = (
				A1E3FF18276DEBBB00AC595D /* 950. Reveal Cards In Increasing Order.h */,
			);
			path = "950. Reveal Cards In Increasing Order";
			sourceTree = "<group>";
		};
		A1E3FF19276DEBBB00AC595D /* 947. Most Stones Removed with Same Row or Column */ = {
			isa = PBXGroup;
			children = (
				A1E3FF1A276DEBBB00AC595D /* 947. Most Stones Removed with Same Row or Column.h */,
			);
			path = "947. Most Stones Removed with Same Row or Column";
			sourceTree = "<group>";
		};
		A1E3FF1B276DEBBB00AC595D /* 1140. Stone Game II */ = {
			isa = PBXGroup;
			children = (
				A1E3FF1C276DEBBB00AC595D /* 1140. Stone Game II.h */,
			);
			path = "1140. Stone Game II";
			sourceTree = "<group>";
		};
		A1E3FF1D276DEBBB00AC595D /* 1108. Defanging an IP Address */ = {
			isa = PBXGroup;
			children = (
				A1E3FF1E276DEBBB00AC595D /* 1108. Defanging an IP Address.h */,
			);
			path = "1108. Defanging an IP Address";
			sourceTree = "<group>";
		};
		A1E3FF1F276DEBBB00AC595D /* 921. Minimum Add to Make Parentheses Valid */ = {
			isa = PBXGroup;
			children = (
				A1E3FF20276DEBBB00AC595D /* 921. Minimum Add to Make Parentheses Valid.h */,
			);
			path = "921. Minimum Add to Make Parentheses Valid";
			sourceTree = "<group>";
		};
		A1E3FF21276DEBBB00AC595D /* 64. Minimum Path Sum */ = {
			isa = PBXGroup;
			children = (
				A1E3FF22276DEBBB00AC595D /* 64. Minimum Path Sum.h */,
			);
			path = "64. Minimum Path Sum";
			sourceTree = "<group>";
		};
		A1E3FF23276DEBBB00AC595D /* 29. Divide Two Integers */ = {
			isa = PBXGroup;
			children = (
				A1E3FF24276DEBBB00AC595D /* 29. Divide Two Integers.h */,
			);
			path = "29. Divide Two Integers";
			sourceTree = "<group>";
		};
		A1E3FF25276DEBBB00AC595D /* 1219. Path with Maximum Gold */ = {
			isa = PBXGroup;
			children = (
				A1E3FF26276DEBBB00AC595D /* 1219. Path with Maximum Gold.h */,
			);
			path = "1219. Path with Maximum Gold";
			sourceTree = "<group>";
		};
		A1E3FF27276DEBBC00AC595D /* 3. Longest Substring Without Repeating Characters */ = {
			isa = PBXGroup;
			children = (
				A1E3FF28276DEBBC00AC595D /* 3. Longest Substring Without Repeating Characters.h */,
			);
			path = "3. Longest Substring Without Repeating Characters";
			sourceTree = "<group>";
		};
		A1E3FF29276DEBBC00AC595D /* 93. Restore IP Addresses */ = {
			isa = PBXGroup;
			children = (
				A1E3FF2A276DEBBC00AC595D /* 93. Restore IP Addresses.h */,
			);
			path = "93. Restore IP Addresses";
			sourceTree = "<group>";
		};
		A1E3FF2B276DEBBC00AC595D /* 537. Complex Number Multiplication */ = {
			isa = PBXGroup;
			children = (
				A1E3FF2C276DEBBC00AC595D /* 537. Complex Number Multiplication.h */,
			);
			path = "537. Complex Number Multiplication";
			sourceTree = "<group>";
		};
		A1E3FF2D276DEBBC00AC595D /* 1002. Find Common Characters */ = {
			isa = PBXGroup;
			children = (
				A1E3FF2E276DEBBC00AC595D /* 1002. Find Common Characters.h */,
			);
			path = "1002. Find Common Characters";
			sourceTree = "<group>";
		};
		A1E3FF2F276DEBBC00AC595D /* 121. Best Time to Buy and Sell Stock */ = {
			isa = PBXGroup;
			children = (
				A1E3FF30276DEBBC00AC595D /* 121. Best Time to Buy and Sell Stock.h */,
			);
			path = "121. Best Time to Buy and Sell Stock";
			sourceTree = "<group>";
		};
		A1E3FF31276DEBBC00AC595D /* 789. Escape The Ghosts */ = {
			isa = PBXGroup;
			children = (
				A1E3FF32276DEBBC00AC595D /* 789. Escape The Ghosts.h */,
			);
			path = "789. Escape The Ghosts";
			sourceTree = "<group>";
		};
		A1E3FF33276DEBBC00AC595D /* 1769. Minimum Number of Operations to Move All Balls to Each Box */ = {
			isa = PBXGroup;
			children = (
				A1E3FF34276DEBBC00AC595D /* 1769. Minimum Number of Operations to Move All Balls to Each Box.h */,
			);
			path = "1769. Minimum Number of Operations to Move All Balls to Each Box";
			sourceTree = "<group>";
		};
		A1E3FF35276DEBBC00AC595D /* 443. String Compression */ = {
			isa = PBXGroup;
			children = (
				A1E3FF36276DEBBC00AC595D /* 443. String Compression.h */,
			);
			path = "443. String Compression";
			sourceTree = "<group>";
		};
		A1E3FF37276DEBBC00AC595D /* 931. Minimum Falling Path Sum */ = {
			isa = PBXGroup;
			children = (
				A1E3FF38276DEBBC00AC595D /* 931. Minimum Falling Path Sum.h */,
			);
			path = "931. Minimum Falling Path Sum";
			sourceTree = "<group>";
		};
		A1E3FF39276DEBBC00AC595D /* 1817. Finding the Users Active Minutes */ = {
			isa = PBXGroup;
			children = (
				A1E3FF3A276DEBBC00AC595D /* 1817. Finding the Users Active Minutes.h */,
			);
			path = "1817. Finding the Users Active Minutes";
			sourceTree = "<group>";
		};
		A1E3FF3B276DEBBC00AC595D /* 1689. Partitioning Into Minimum Number Of Deci-Binary Numbers */ = {
			isa = PBXGroup;
			children = (
				A1E3FF3C276DEBBC00AC595D /* 1689. Partitioning Into Minimum Number Of Deci-Binary Numbers.h */,
			);
			path = "1689. Partitioning Into Minimum Number Of Deci-Binary Numbers";
			sourceTree = "<group>";
		};
		A1E3FF3D276DEBBC00AC595D /* 80. Remove Duplicates from Sorted Array II */ = {
			isa = PBXGroup;
			children = (
				A1E3FF3E276DEBBC00AC595D /* 80. Remove Duplicates from Sorted Array II.h */,
			);
			path = "80. Remove Duplicates from Sorted Array II";
			sourceTree = "<group>";
		};
		A1E3FF3F276DEBBC00AC595D /* 876. Middle of the Linked List */ = {
			isa = PBXGroup;
			children = (
				A1E3FF40276DEBBC00AC595D /* 876. Middle of the Linked List.h */,
			);
			path = "876. Middle of the Linked List";
			sourceTree = "<group>";
		};
		A1E3FF41276DEBBC00AC595D /* 1026. Maximum Difference Between Node and Ancestor */ = {
			isa = PBXGroup;
			children = (
				A1E3FF42276DEBBC00AC595D /* 1026. Maximum Difference Between Node and Ancestor.h */,
			);
			path = "1026. Maximum Difference Between Node and Ancestor";
			sourceTree = "<group>";
		};
		A1E3FF43276DEBBC00AC595D /* 1043. Partition Array for Maximum Sum */ = {
			isa = PBXGroup;
			children = (
				A1E3FF44276DEBBC00AC595D /* 1043. Partition Array for Maximum Sum.h */,
			);
			path = "1043. Partition Array for Maximum Sum";
			sourceTree = "<group>";
		};
		A1E3FF45276DEBBC00AC595D /* 797. All Paths From Source to Target */ = {
			isa = PBXGroup;
			children = (
				A1E3FF46276DEBBC00AC595D /* 797. All Paths From Source to Target.h */,
			);
			path = "797. All Paths From Source to Target";
			sourceTree = "<group>";
		};
		A1E3FF47276DEBBC00AC595D /* 885. Spiral Matrix III */ = {
			isa = PBXGroup;
			children = (
				A1E3FF48276DEBBC00AC595D /* 885. Spiral Matrix III.h */,
			);
			path = "885. Spiral Matrix III";
			sourceTree = "<group>";
		};
		A1E3FF49276DEBBC00AC595D /* 983. Minimum Cost For Tickets */ = {
			isa = PBXGroup;
			children = (
				A1E3FF4A276DEBBC00AC595D /* 983. Minimum Cost For Tickets.h */,
			);
			path = "983. Minimum Cost For Tickets";
			sourceTree = "<group>";
		};
		A1E3FF4B276DEBBC00AC595D /* 807. Max Increase to Keep City Skyline */ = {
			isa = PBXGroup;
			children = (
				A1E3FF4C276DEBBC00AC595D /* 807. Max Increase to Keep City Skyline.h */,
			);
			path = "807. Max Increase to Keep City Skyline";
			sourceTree = "<group>";
		};
		A1E3FF4D276DEBBC00AC595D /* 347. Top K Frequent Elements */ = {
			isa = PBXGroup;
			children = (
				A1E3FF4E276DEBBC00AC595D /* 347. Top K Frequent Elements.h */,
			);
			path = "347. Top K Frequent Elements";
			sourceTree = "<group>";
		};
		A1E3FF4F276DEBBC00AC595D /* 969. Pancake Sorting */ = {
			isa = PBXGroup;
			children = (
				A1E3FF50276DEBBC00AC595D /* 969. Pancake Sorting.h */,
			);
			path = "969. Pancake Sorting";
			sourceTree = "<group>";
		};
		A1E3FF51276DEBBC00AC595D /* 1233. Remove Sub-Folders from the Filesystem */ = {
			isa = PBXGroup;
			children = (
				A1E3FF52276DEBBC00AC595D /* 1233. Remove Sub-Folders from the Filesystem.h */,
			);
			path = "1233. Remove Sub-Folders from the Filesystem";
			sourceTree = "<group>";
		};
		A1E3FF53276DEBBD00AC595D /* 34. Find First and Last Position of Element in Sorted Array */ = {
			isa = PBXGroup;
			children = (
				A1E3FF54276DEBBD00AC595D /* 34. Find First and Last Position of Element in Sorted Array.h */,
			);
			path = "34. Find First and Last Position of Element in Sorted Array";
			sourceTree = "<group>";
		};
		A1E3FF55276DEBBD00AC595D /* 874. Walking Robot Simulation */ = {
			isa = PBXGroup;
			children = (
				A1E3FF56276DEBBD00AC595D /* 874. Walking Robot Simulation.h */,
			);
			path = "874. Walking Robot Simulation";
			sourceTree = "<group>";
		};
		A1E3FF57276DEBBD00AC595D /* 1637. Widest Vertical Area Between Two Points Containing No Points */ = {
			isa = PBXGroup;
			children = (
				A1E3FF58276DEBBD00AC595D /* 1637. Widest Vertical Area Between Two Points Containing No Points.h */,
			);
			path = "1637. Widest Vertical Area Between Two Points Containing No Points";
			sourceTree = "<group>";
		};
		A1E3FF59276DEBBD00AC595D /* 508. Most Frequent Subtree Sum */ = {
			isa = PBXGroup;
			children = (
				A1E3FF5A276DEBBD00AC595D /* 508. Most Frequent Subtree Sum.h */,
			);
			path = "508. Most Frequent Subtree Sum";
			sourceTree = "<group>";
		};
		A1E3FF5B276DEBBD00AC595D /* 15. 3Sum */ = {
			isa = PBXGroup;
			children = (
				A1E3FF5C276DEBBD00AC595D /* 15. 3Sum.h */,
			);
			path = "15. 3Sum";
			sourceTree = "<group>";
		};
		A1E3FF5D276DEBBD00AC595D /* 75. Sort Colors */ = {
			isa = PBXGroup;
			children = (
				A1E3FF5E276DEBBD00AC595D /* 75. Sort Colors.h */,
			);
			path = "75. Sort Colors";
			sourceTree = "<group>";
		};
		A1E3FF5F276DEBBD00AC595D /* 684. Redundant Connection */ = {
			isa = PBXGroup;
			children = (
				A1E3FF60276DEBBD00AC595D /* 684. Redundant Connection.h */,
			);
			path = "684. Redundant Connection";
			sourceTree = "<group>";
		};
		A1E3FF61276DEBBD00AC595D /* 1094. Car Pooling */ = {
			isa = PBXGroup;
			children = (
				A1E3FF62276DEBBD00AC595D /* 1094. Car Pooling.h */,
			);
			path = "1094. Car Pooling";
			sourceTree = "<group>";
		};
		A1E3FF63276DEBBD00AC595D /* 77. Combinations */ = {
			isa = PBXGroup;
			children = (
				A1E3FF64276DEBBD00AC595D /* 77. Combinations.h */,
			);
			path = "77. Combinations";
			sourceTree = "<group>";
		};
		A1E3FF65276DEBBD00AC595D /* 1011. Capacity To Ship Packages Within D Days */ = {
			isa = PBXGroup;
			children = (
				A1E3FF66276DEBBD00AC595D /* 1011. Capacity To Ship Packages Within D Days.h */,
			);
			path = "1011. Capacity To Ship Packages Within D Days";
			sourceTree = "<group>";
		};
		A1E3FF67276DEBBD00AC595D /* 427. Construct Quad Tree */ = {
			isa = PBXGroup;
			children = (
				A1E3FF68276DEBBD00AC595D /* 427. Construct Quad Tree.h */,
			);
			path = "427. Construct Quad Tree";
			sourceTree = "<group>";
		};
		A1E3FF69276DEBBD00AC595D /* 1072. Flip Columns For Maximum Number of Equal Rows */ = {
			isa = PBXGroup;
			children = (
				A1E3FF6A276DEBBD00AC595D /* 1072. Flip Columns For Maximum Number of Equal Rows.h */,
			);
			path = "1072. Flip Columns For Maximum Number of Equal Rows";
			sourceTree = "<group>";
		};
		A1E3FF6B276DEBBD00AC595D /* 1111. Maximum Nesting Depth of Two Valid Parentheses Strings */ = {
			isa = PBXGroup;
			children = (
				A1E3FF6C276DEBBD00AC595D /* 1111. Maximum Nesting Depth of Two Valid Parentheses Strings.h */,
			);
			path = "1111. Maximum Nesting Depth of Two Valid Parentheses Strings";
			sourceTree = "<group>";
		};
		A1E3FF6D276DEBBD00AC595D /* 1079. Letter Tile Possibilities */ = {
			isa = PBXGroup;
			children = (
				A1E3FF6E276DEBBD00AC595D /* 1079. Letter Tile Possibilities.h */,
				A1E3FF6F276DEBBD00AC595D /* 1079. Letter Tile Possibilities.txt */,
			);
			path = "1079. Letter Tile Possibilities";
			sourceTree = "<group>";
		};
		A1E3FF70276DEBBD00AC595D /* 998. Maximum Binary Tree II */ = {
			isa = PBXGroup;
			children = (
				A1E3FF71276DEBBD00AC595D /* 998. Maximum Binary Tree II.h */,
			);
			path = "998. Maximum Binary Tree II";
			sourceTree = "<group>";
		};
		A1E3FF72276DEBBD00AC595D /* 1008. Construct Binary Search Tree from Preorder Traversal */ = {
			isa = PBXGroup;
			children = (
				A1E3FF73276DEBBD00AC595D /* 1008. Construct Binary Search Tree from Preorder Traversal.h */,
			);
			path = "1008. Construct Binary Search Tree from Preorder Traversal";
			sourceTree = "<group>";
		};
		A1E3FF74276DEBBD00AC595D /* 25. Reverse Nodes in k-Group */ = {
			isa = PBXGroup;
			children = (
				A1E3FF75276DEBBD00AC595D /* 25. Reverse Nodes in k-Group.h */,
			);
			path = "25. Reverse Nodes in k-Group";
			sourceTree = "<group>";
		};
		A1E3FF76276DEBBD00AC595D /* 771. Jewels and Stones */ = {
			isa = PBXGroup;
			children = (
				A1E3FF77276DEBBD00AC595D /* 771. Jewels and Stones.h */,
			);
			path = "771. Jewels and Stones";
			sourceTree = "<group>";
		};
		A1E3FF78276DEBBD00AC595D /* 841. Keys and Rooms  */ = {
			isa = PBXGroup;
			children = (
				A1E3FF79276DEBBD00AC595D /* 841. Keys and Rooms .h */,
			);
			path = "841. Keys and Rooms ";
			sourceTree = "<group>";
		};
		A1E3FF7A276DEBBD00AC595D /* 1222. Queens That Can Attack the King */ = {
			isa = PBXGroup;
			children = (
				A1E3FF7B276DEBBD00AC595D /* 1222. Queens That Can Attack the King.h */,
			);
			path = "1222. Queens That Can Attack the King";
			sourceTree = "<group>";
		};
		A1E3FF7C276DEBBE00AC595D /* 1268. Search Suggestions System */ = {
			isa = PBXGroup;
			children = (
				A1E3FF7D276DEBBE00AC595D /* 1268. Search Suggestions System.h */,
			);
			path = "1268. Search Suggestions System";
			sourceTree = "<group>";
		};
		A1E3FF7E276DEBBE00AC595D /* 712. Minimum ASCII Delete Sum for Two Strings */ = {
			isa = PBXGroup;
			children = (
				A1E3FF7F276DEBBE00AC595D /* 712. Minimum ASCII Delete Sum for Two Strings.h */,
			);
			path = "712. Minimum ASCII Delete Sum for Two Strings";
			sourceTree = "<group>";
		};
		A1E3FF80276DEBBE00AC595D /* 11. Container With Most Water */ = {
			isa = PBXGroup;
			children = (
				A1E3FF81276DEBBE00AC595D /* 11. Container With Most Water.h */,
			);
			path = "11. Container With Most Water";
			sourceTree = "<group>";
		};
		A1E3FF82276DEBBE00AC595D /* 835. Image Overlap  */ = {
			isa = PBXGroup;
			children = (
				A1E3FF83276DEBBE00AC595D /* 835. Image Overlap .h */,
			);
			path = "835. Image Overlap ";
			sourceTree = "<group>";
		};
		A1E3FF84276DEBBE00AC595D /* 1282. Group the People Given the Group Size They Belong To */ = {
			isa = PBXGroup;
			children = (
				A1E3FF85276DEBBE00AC595D /* 1282. Group the People Given the Group Size They Belong To.h */,
			);
			path = "1282. Group the People Given the Group Size They Belong To";
			sourceTree = "<group>";
		};
		A1E3FF86276DEBBE00AC595D /* 1263. Minimum Moves to Move a Box to Their Target Location */ = {
			isa = PBXGroup;
			children = (
				A1E3FF87276DEBBE00AC595D /* 1263. Minimum Moves to Move a Box to Their Target Location.h */,
			);
			path = "1263. Minimum Moves to Move a Box to Their Target Location";
			sourceTree = "<group>";
		};
		A1E3FF88276DEBBE00AC595D /* 1031. Maximum Sum of Two Non-Overlapping Subarrays */ = {
			isa = PBXGroup;
			children = (
				A1E3FF89276DEBBE00AC595D /* 1031. Maximum Sum of Two Non-Overlapping Subarrays.h */,
			);
			path = "1031. Maximum Sum of Two Non-Overlapping Subarrays";
			sourceTree = "<group>";
		};
		A1E3FF8A276DEBBE00AC595D /* 746. Min Cost Climbing Stairs */ = {
			isa = PBXGroup;
			children = (
				A1E3FF8B276DEBBE00AC595D /* 746. Min Cost Climbing Stairs.h */,
			);
			path = "746. Min Cost Climbing Stairs";
			sourceTree = "<group>";
		};
		A1E3FF8C276DEBBE00AC595D /* 78. Subsets */ = {
			isa = PBXGroup;
			children = (
				A1E3FF8D276DEBBE00AC595D /* 78. Subsets.h */,
			);
			path = "78. Subsets";
			sourceTree = "<group>";
		};
		A1E3FF8E276DEBBE00AC595D /* 553. Optimal Division */ = {
			isa = PBXGroup;
			children = (
				A1E3FF8F276DEBBE00AC595D /* 553. Optimal Division.h */,
			);
			path = "553. Optimal Division";
			sourceTree = "<group>";
		};
		A1E3FF90276DEBBE00AC595D /* 513. Find Bottom Left Tree Value */ = {
			isa = PBXGroup;
			children = (
				A1E3FF91276DEBBE00AC595D /* 513. Find Bottom Left Tree Value.h */,
			);
			path = "513. Find Bottom Left Tree Value";
			sourceTree = "<group>";
		};
		A1E3FF92276DEBBE00AC595D /* 877. Stone Game */ = {
			isa = PBXGroup;
			children = (
				A1E3FF93276DEBBE00AC595D /* 877. Stone Game.h */,
			);
			path = "877. Stone Game";
			sourceTree = "<group>";
		};
		A1E3FF94276DEBBE00AC595D /* 1325. Delete Leaves With a Given Value */ = {
			isa = PBXGroup;
			children = (
				A1E3FF95276DEBBE00AC595D /* 1325. Delete Leaves With a Given Value.h */,
			);
			path = "1325. Delete Leaves With a Given Value";
			sourceTree = "<group>";
		};
		A1E3FF96276DEBBE00AC595D /* 1104. Path In Zigzag Labelled Binary Tree */ = {
			isa = PBXGroup;
			children = (
				A1E3FF97276DEBBE00AC595D /* 1104. Path In Zigzag Labelled Binary Tree.h */,
			);
			path = "1104. Path In Zigzag Labelled Binary Tree";
			sourceTree = "<group>";
		};
		A1E3FF98276DEBBE00AC595D /* 81. Search in Rotated Sorted Array II */ = {
			isa = PBXGroup;
			children = (
				A1E3FF99276DEBBE00AC595D /* 81. Search in Rotated Sorted Array II.h */,
			);
			path = "81. Search in Rotated Sorted Array II";
			sourceTree = "<group>";
		};
		A1E3FF9A276DEBBE00AC595D /* 96. Unique Binary Search Trees */ = {
			isa = PBXGroup;
			children = (
				A1E3FF9B276DEBBE00AC595D /* 96. Unique Binary Search Trees.h */,
			);
			path = "96. Unique Binary Search Trees";
			sourceTree = "<group>";
		};
		A1E3FF9C276DEBBE00AC595D /* 63. Unique Paths II */ = {
			isa = PBXGroup;
			children = (
				A1E3FF9D276DEBBE00AC595D /* 63. Unique Paths II.h */,
			);
			path = "63. Unique Paths II";
			sourceTree = "<group>";
		};
		A1E3FF9E276DEBBE00AC595D /* 1123. Lowest Common Ancestor of Deepest Leaves */ = {
			isa = PBXGroup;
			children = (
				A1E3FF9F276DEBBE00AC595D /* 1123. Lowest Common Ancestor of Deepest Leaves.h */,
			);
			path = "1123. Lowest Common Ancestor of Deepest Leaves";
			sourceTree = "<group>";
		};
		A1E3FFA0276DEBBE00AC595D /* 890. Find and Replace Pattern */ = {
			isa = PBXGroup;
			children = (
				A1E3FFA1276DEBBE00AC595D /* 890. Find and Replace Pattern.h */,
			);
			path = "890. Find and Replace Pattern";
			sourceTree = "<group>";
		};
		A1E3FFA2276DEBBE00AC595D /* 53. Maximum Subarray */ = {
			isa = PBXGroup;
			children = (
				A1E3FFA3276DEBBE00AC595D /* 53. Maximum Subarray.h */,
			);
			path = "53. Maximum Subarray";
			sourceTree = "<group>";
		};
		A1E3FFA4276DEBBE00AC595D /* 97. Interleaving String */ = {
			isa = PBXGroup;
			children = (
				A1E3FFA5276DEBBF00AC595D /* 97. Interleaving String.h */,
			);
			path = "97. Interleaving String";
			sourceTree = "<group>";
		};
		A1E3FFA6276DEBBF00AC595D /* 894. All Possible Full Binary Trees */ = {
			isa = PBXGroup;
			children = (
				A1E3FFA7276DEBBF00AC595D /* 894. All Possible Full Binary Trees.h */,
			);
			path = "894. All Possible Full Binary Trees";
			sourceTree = "<group>";
		};
		A1E3FFA8276DEBBF00AC595D /* 865. Smallest Subtree with all the Deepest Nodes */ = {
			isa = PBXGroup;
			children = (
				A1E3FFA9276DEBBF00AC595D /* 865. Smallest Subtree with all the Deepest Nodes.h */,
			);
			path = "865. Smallest Subtree with all the Deepest Nodes";
			sourceTree = "<group>";
		};
		A1E3FFAA276DEBBF00AC595D /* 1828. Queries on Number of Points Inside a Circle */ = {
			isa = PBXGroup;
			children = (
				A1E3FFAB276DEBBF00AC595D /* 1828. Queries on Number of Points Inside a Circle.h */,
			);
			path = "1828. Queries on Number of Points Inside a Circle";
			sourceTree = "<group>";
		};
		A1E3FFAC276DEBBF00AC595D /* 1003. Check If Word Is Valid After Substitutions */ = {
			isa = PBXGroup;
			children = (
				A1E3FFAD276DEBBF00AC595D /* 1003. Check If Word Is Valid After Substitutions.h */,
			);
			path = "1003. Check If Word Is Valid After Substitutions";
			sourceTree = "<group>";
		};
		A1E3FFAE276DEBBF00AC595D /* 609. Find Duplicate File in System */ = {
			isa = PBXGroup;
			children = (
				A1E3FFAF276DEBBF00AC595D /* 609. Find Duplicate File in System.h */,
			);
			path = "609. Find Duplicate File in System";
			sourceTree = "<group>";
		};
		A1E3FFB0276DEBBF00AC595D /* 1273. Delete Tree Nodes */ = {
			isa = PBXGroup;
			children = (
				A1E3FFB1276DEBBF00AC595D /* 1273. Delete Tree Nodes.h */,
			);
			path = "1273. Delete Tree Nodes";
			sourceTree = "<group>";
		};
		A1E3FFB2276DEBBF00AC595D /* 1877. Minimize Maximum Pair Sum in Array */ = {
			isa = PBXGroup;
			children = (
				A1E3FFB3276DEBBF00AC595D /* 1877. Minimize Maximum Pair Sum in Array.h */,
			);
			path = "1877. Minimize Maximum Pair Sum in Array";
			sourceTree = "<group>";
		};
		A1E3FFB4276DEBBF00AC595D /* 200. Number of Islands */ = {
			isa = PBXGroup;
			children = (
				A1E3FFB5276DEBBF00AC595D /* 200. Number of Islands.h */,
			);
			path = "200. Number of Islands";
			sourceTree = "<group>";
		};
		A1E3FFB6276DEBBF00AC595D /* 43. Multiply Strings */ = {
			isa = PBXGroup;
			children = (
				A1E3FFB7276DEBBF00AC595D /* 43. Multiply Strings.h */,
			);
			path = "43. Multiply Strings";
			sourceTree = "<group>";
		};
		A1E3FFB8276DEBBF00AC595D /* 56. Merge Intervals */ = {
			isa = PBXGroup;
			children = (
				A1E3FFB9276DEBBF00AC595D /* 56. Merge Intervals.h */,
			);
			path = "56. Merge Intervals";
			sourceTree = "<group>";
		};
		A1E3FFBA276DEBBF00AC595D /* 57. Insert Interval */ = {
			isa = PBXGroup;
			children = (
				A1E3FFBB276DEBBF00AC595D /* 57. Insert Interval.h */,
			);
			path = "57. Insert Interval";
			sourceTree = "<group>";
		};
		A1E3FFBC276DEBBF00AC595D /* 1090. Largest Values From Labels */ = {
			isa = PBXGroup;
			children = (
				A1E3FFBD276DEBBF00AC595D /* 1090. Largest Values From Labels.h */,
			);
			path = "1090. Largest Values From Labels";
			sourceTree = "<group>";
		};
		A1E3FFBE276DEBBF00AC595D /* 82. Remove Duplicates from Sorted List II */ = {
			isa = PBXGroup;
			children = (
				A1E3FFBF276DEBBF00AC595D /* 82. Remove Duplicates from Sorted List II.h */,
			);
			path = "82. Remove Duplicates from Sorted List II";
			sourceTree = "<group>";
		};
		A1E3FFC0276DEBBF00AC595D /* 109. Convert Sorted List to Binary Search Tree */ = {
			isa = PBXGroup;
			children = (
				A1E3FFC1276DEBBF00AC595D /* 109. Convert Sorted List to Binary Search Tree.h */,
			);
			path = "109. Convert Sorted List to Binary Search Tree";
			sourceTree = "<group>";
		};
		A1E3FFC2276DEBBF00AC595D /* 18. 4Sum */ = {
			isa = PBXGroup;
			children = (
				A1E3FFC3276DEBBF00AC595D /* 18. 4Sum.h */,
			);
			path = "18. 4Sum";
			sourceTree = "<group>";
		};
		A1E3FFC4276DEBBF00AC595D /* 529. Minesweeper */ = {
			isa = PBXGroup;
			children = (
				A1E3FFC5276DEBBF00AC595D /* 529. Minesweeper.h */,
			);
			path = "529. Minesweeper";
			sourceTree = "<group>";
		};
		A1E3FFC6276DEBBF00AC595D /* 951. Flip Equivalent Binary Trees */ = {
			isa = PBXGroup;
			children = (
				A1E3FFC7276DEBBF00AC595D /* 951. Flip Equivalent Binary Trees.h */,
			);
			path = "951. Flip Equivalent Binary Trees";
			sourceTree = "<group>";
		};
		A1E3FFC8276DEBBF00AC595D /* 40. Combination Sum II */ = {
			isa = PBXGroup;
			children = (
				A1E3FFC9276DEBBF00AC595D /* 40. Combination Sum II.h */,
			);
			path = "40. Combination Sum II";
			sourceTree = "<group>";
		};
		A1E3FFCA276DEBBF00AC595D /* 1019. Next Greater Node In Linked List */ = {
			isa = PBXGroup;
			children = (
				A1E3FFCB276DEBBF00AC595D /* 1019. Next Greater Node In Linked List.h */,
			);
			path = "1019. Next Greater Node In Linked List";
			sourceTree = "<group>";
		};
		A1E3FFCC276DEBBF00AC595D /* 1161. Maximum Level Sum of a Binary Tree */ = {
			isa = PBXGroup;
			children = (
				A1E3FFCD276DEBBF00AC595D /* 1161. Maximum Level Sum of a Binary Tree.h */,
			);
			path = "1161. Maximum Level Sum of a Binary Tree";
			sourceTree = "<group>";
		};
		A1E3FFCE276DEBC000AC595D /* 5. Longest Palindromic Substring */ = {
			isa = PBXGroup;
			children = (
				A1E3FFCF276DEBC000AC595D /* 5. Longest Palindromic Substring.h */,
			);
			path = "5. Longest Palindromic Substring";
			sourceTree = "<group>";
		};
		A1E3FFD0276DEBC000AC595D /* 979. Distribute Coins in Binary Tree */ = {
			isa = PBXGroup;
			children = (
				A1E3FFD1276DEBC000AC595D /* 979. Distribute Coins in Binary Tree.h */,
			);
			path = "979. Distribute Coins in Binary Tree";
			sourceTree = "<group>";
		};
		A1E3FFD2276DEBC000AC595D /* 445. Add Two Numbers II */ = {
			isa = PBXGroup;
			children = (
				A1E3FFD3276DEBC000AC595D /* 445. Add Two Numbers II.h */,
			);
			path = "445. Add Two Numbers II";
			sourceTree = "<group>";
		};
		A1E3FFD4276DEBC000AC595D /* 42. Trapping Rain Water */ = {
			isa = PBXGroup;
			children = (
				A1E3FFD5276DEBC000AC595D /* 42. Trapping Rain Water.h */,
			);
			path = "42. Trapping Rain Water";
			sourceTree = "<group>";
		};
		A1E3FFD6276DEBC000AC595D /* 639. Decode Ways II */ = {
			isa = PBXGroup;
			children = (
				A1E3FFD7276DEBC000AC595D /* 639. Decode Ways II.h */,
			);
			path = "639. Decode Ways II";
			sourceTree = "<group>";
		};
		A1E3FFD8276DEBC000AC595D /* 707. Design Linked List */ = {
			isa = PBXGroup;
			children = (
				A1E3FFD9276DEBC000AC595D /* 707. Design Linked List.h */,
			);
			path = "707. Design Linked List";
			sourceTree = "<group>";
		};
		A1E3FFDA276DEBC000AC595D /* 91. Decode Ways */ = {
			isa = PBXGroup;
			children = (
				A1E3FFDB276DEBC000AC595D /* 91. Decode Ways .h */,
			);
			path = "91. Decode Ways";
			sourceTree = "<group>";
		};
		A1E3FFDC276DEBC000AC595D /* 617. Merge Two Binary Trees */ = {
			isa = PBXGroup;
			children = (
				A1E3FFDD276DEBC000AC595D /* 617. Merge Two Binary Trees.h */,
			);
			path = "617. Merge Two Binary Trees";
			sourceTree = "<group>";
		};
		A1E3FFDE276DEBC000AC595D /* 725. Split Linked List in Parts */ = {
			isa = PBXGroup;
			children = (
				A1E3FFDF276DEBC000AC595D /* 725. Split Linked List in Parts.h */,
			);
			path = "725. Split Linked List in Parts";
			sourceTree = "<group>";
		};
		A1E3FFE0276DEBC000AC595D /* 17. Letter Combinations of a Phone Number */ = {
			isa = PBXGroup;
			children = (
				A1E3FFE1276DEBC000AC595D /* 17. Letter Combinations of a Phone Number.h */,
			);
			path = "17. Letter Combinations of a Phone Number";
			sourceTree = "<group>";
		};
		A1E3FFE2276DEBC000AC595D /* 1247. Minimum Swaps to Make Strings Equal */ = {
			isa = PBXGroup;
			children = (
				A1E3FFE3276DEBC000AC595D /* 1247. Minimum Swaps to Make Strings Equal.h */,
			);
			path = "1247. Minimum Swaps to Make Strings Equal";
			sourceTree = "<group>";
		};
		A1E3FFE4276DEBC000AC595D /* 142. Linked List Cycle II */ = {
			isa = PBXGroup;
			children = (
				A1E3FFE5276DEBC000AC595D /* 142. Linked List Cycle II.h */,
			);
			path = "142. Linked List Cycle II";
			sourceTree = "<group>";
		};
		A1E3FFE6276DEBC000AC595D /* 946. Validate Stack Sequences */ = {
			isa = PBXGroup;
			children = (
				A1E3FFE7276DEBC000AC595D /* 946. Validate Stack Sequences.h */,
			);
			path = "946. Validate Stack Sequences";
			sourceTree = "<group>";
		};
		A1E3FFE8276DEBC000AC595D /* 701. Insert into a Binary Search Tree */ = {
			isa = PBXGroup;
			children = (
				A1E3FFE9276DEBC000AC595D /* 701. Insert into a Binary Search Tree.h */,
				A1E3FFEA276DEBC000AC595D /* 701. Insert into a Binary Search Tree.txt */,
			);
			path = "701. Insert into a Binary Search Tree";
			sourceTree = "<group>";
		};
		A1E3FFEB276DEBC000AC595D /* 98. Validate Binary Search Tree */ = {
			isa = PBXGroup;
			children = (
				A1E3FFEC276DEBC000AC595D /* 98. Validate Binary Search Tree.h */,
			);
			path = "98. Validate Binary Search Tree";
			sourceTree = "<group>";
		};
		A1E3FFED276DEBC000AC595D /* 1130. Minimum Cost Tree From Leaf Values */ = {
			isa = PBXGroup;
			children = (
				A1E3FFEE276DEBC000AC595D /* 1130. Minimum Cost Tree From Leaf Values.h */,
			);
			path = "1130. Minimum Cost Tree From Leaf Values";
			sourceTree = "<group>";
		};
		A1E3FFEF276DEBC000AC595D /* 1038. Binary Search Tree to Greater Sum Tree */ = {
			isa = PBXGroup;
			children = (
				A1E3FFF0276DEBC000AC595D /* 1038. Binary Search Tree to Greater Sum Tree.h */,
			);
			path = "1038. Binary Search Tree to Greater Sum Tree";
			sourceTree = "<group>";
		};
		A1E3FFF1276DEBC000AC595D /* 1630. Arithmetic Subarrays */ = {
			isa = PBXGroup;
			children = (
				A1E3FFF2276DEBC000AC595D /* 1630. Arithmetic Subarrays.h */,
			);
			path = "1630. Arithmetic Subarrays";
			sourceTree = "<group>";
		};
		A1E3FFF3276DEBC000AC595D /* 1290. Convert Binary Number in a Linked List to Integer */ = {
			isa = PBXGroup;
			children = (
				A1E3FFF4276DEBC000AC595D /* 1290. Convert Binary Number in a Linked List to Integer.h */,
			);
			path = "1290. Convert Binary Number in a Linked List to Integer";
			sourceTree = "<group>";
		};
		A1E3FFF5276DEBC000AC595D /* 912. Sort an Array  */ = {
			isa = PBXGroup;
			children = (
				A1E3FFF6276DEBC000AC595D /* 912. Sort an Array .h */,
			);
			path = "912. Sort an Array ";
			sourceTree = "<group>";
		};
		A1E3FFF7276DEBC000AC595D /* 55. Jump Game */ = {
			isa = PBXGroup;
			children = (
				A1E3FFF8276DEBC000AC595D /* 55. Jump Game.h */,
			);
			path = "55. Jump Game";
			sourceTree = "<group>";
		};
		A1E3FFF9276DEBC000AC595D /* 48. Rotate Image */ = {
			isa = PBXGroup;
			children = (
				A1E3FFFA276DEBC000AC595D /* 48. Rotate Image.h */,
			);
			path = "48. Rotate Image";
			sourceTree = "<group>";
		};
		A1E3FFFB276DEBC000AC595D /* 709. To Lower Case */ = {
			isa = PBXGroup;
			children = (
				A1E3FFFC276DEBC000AC595D /* 709. To Lower Case.h */,
			);
			path = "709. To Lower Case";
			sourceTree = "<group>";
		};
		A1E3FFFD276DEBC100AC595D /* 1110. Delete Nodes And Return Forest */ = {
			isa = PBXGroup;
			children = (
				A1E3FFFE276DEBC100AC595D /* 1110. Delete Nodes And Return Forest.h */,
			);
			path = "1110. Delete Nodes And Return Forest";
			sourceTree = "<group>";
		};
		A1E3FFFF276DEBC100AC595D /* 31. Next Permutation */ = {
			isa = PBXGroup;
			children = (
				A1E30000276DEBC100AC595D /* 31. Next Permutation.h */,
			);
			path = "31. Next Permutation";
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		A169986D22FEBF6200F640E5 /* leetcode */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = A169987522FEBF6200F640E5 /* Build configuration list for PBXNativeTarget "leetcode" */;
			buildPhases = (
				A169986A22FEBF6200F640E5 /* Sources */,
				A169986B22FEBF6200F640E5 /* Frameworks */,
				A169986C22FEBF6200F640E5 /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = leetcode;
			productName = leetcode;
			productReference = A169986E22FEBF6200F640E5 /* leetcode */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		A169986622FEBF6200F640E5 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1030;
				ORGANIZATIONNAME = Andy;
				TargetAttributes = {
					A169986D22FEBF6200F640E5 = {
						CreatedOnToolsVersion = 10.3;
					};
				};
			};
			buildConfigurationList = A169986922FEBF6200F640E5 /* Build configuration list for PBXProject "leetcode" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = A169986522FEBF6200F640E5;
			productRefGroup = A169986F22FEBF6200F640E5 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				A169986D22FEBF6200F640E5 /* leetcode */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		A169986A22FEBF6200F640E5 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				A169987222FEBF6200F640E5 /* main.cpp in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		A169987322FEBF6200F640E5 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				CODE_SIGN_IDENTITY = "Mac Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
			};
			name = Debug;
		};
		A169987422FEBF6200F640E5 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				CODE_SIGN_IDENTITY = "Mac Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
			};
			name = Release;
		};
		A169987622FEBF6200F640E5 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = 9E9C2ZNYDA;
				PRODUCT_BUNDLE_IDENTIFIER = cn.andysheng.leetcode;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		A169987722FEBF6200F640E5 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = 6JV8VTV77T;
				PRODUCT_BUNDLE_IDENTIFIER = cn.andysheng.leetcode;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		A169986922FEBF6200F640E5 /* Build configuration list for PBXProject "leetcode" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				A169987322FEBF6200F640E5 /* Debug */,
				A169987422FEBF6200F640E5 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		A169987522FEBF6200F640E5 /* Build configuration list for PBXNativeTarget "leetcode" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				A169987622FEBF6200F640E5 /* Debug */,
				A169987722FEBF6200F640E5 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = A169986622FEBF6200F640E5 /* Project object */;
}
